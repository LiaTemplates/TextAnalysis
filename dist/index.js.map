{"mappings":"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AlB9BC,IACVhB,EAAQD,EAAQA,EAAOI,UAEtCJ,EAAOxF,UAAYyF,EAAQD,EAAQA,EAAOI,cCL5Cc,EAAAA,EACAC,EEJa3J,KAAKsF,MAAM,osBF4O5B,SAAmBsE,OACbC,EAASH,EAAUL,OAAOO,IAC3BlD,cACAG,QAAQiD,EAAY,IACpBC,MAAMC,GACL9K,EAAS2K,EAAO3K,OAChB6H,GAAS,EACTkD,EAAQ,SAEHlD,EAAQ7H,GACf+K,GAASC,EAASL,EAAO9C,GAAOF,QAAQsD,EAA0B,YAG7DF,OAjPLG,EAAAA,GAASjD,eAITkD,EAAAA,IAAkClE,OAAAA,CAElC,aACA,MACA,OACA,QACA,cACA,uBACA,MACA,OACA,QACA,WACA,0BACA,QACA,OACA,MACA,MACA,SACA,iBAAA,CAEI,qBACA,KACA,KACA,QACA,MACA,QACA,KACA,MACA,SACA,WACA,MACA,WACA,MACAhD,KAAK,KACP,QACF,iBAAA,CAEI,kBACA,KACA,QACA,MACA,QACA,KACA,MACA,KACA,SACA,MACA,WACA,MACAA,KAAK,KACP,SACFA,KAAK,KACP,KAGEmH,EAAAA,IAAkCnE,OACpC,cAAA,CAEI,qBACA,KACA,KACA,QACA,QACA,KACA,SACA,UACA,MACA,WACA,MACAhD,KAAK,KACP,MACF,KAKEoH,EAAAA,IAAqCpE,OACvC,MAAA,CAEI,kBACA,uBACA,cACA,KACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,OACA,KACA,KACA,SACA,QACA,SACA,oBACAhD,KAAK,KACP,KACF,KAGEqH,EAAAA,IAAqCrE,OAAAA,CAErC,aACA,kBACA,aACA,wBACA,qBACAhD,KAAK,KACP,KAGEsH,EAAAA,IAAuCtE,OAAAA,CAEvC,gBACA,WACA,OACA,OACA,KACA,KACA,KACA,MACA,OACA,OACA,aACA,mBACAhD,KAAK,KACP,KAGEuH,EAAkC,SAGlCC,EAAAA,IAAwBxE,OAAAA,CAExB,OAAA,CAEI,KACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,QACAhD,KAAK,KACP,IACF,M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A,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,OACA,YACA,OACA,WACA,SACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,UACA,QACA,QACA,SACA,UACA,iBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MACA,eAEA,gBACA,SACA,SACA,YACA,WACA,QACA,WACAoC,QAAQ3C,EAAUwC,oBAEbxC,WDnfH4F,EAAAA,EACAC,EAAgB,yEAEhBC,EAAAA,IAAkBC,IELlBC,CACJ,IACA,OACA,SACA,QACA,QACA,SACA,SACA,WACA,UACA,OACA,SACA,QACA,OACA,SACA,MACA,OACA,MACA,UACA,SACA,YACA,OACA,SACA,QACA,YACA,YACA,aACA,QACA,UACA,MACA,OACA,MACA,QACA,KACA,QACA,MACA,MACA,MACA,WACA,WACA,UACA,UACA,OACA,QACA,QACA,QACA,MACA,QACA,YACA,QACA,SACA,QACA,QACA,QACA,UACA,OACA,SACA,KACA,UACA,WACA,QACA,SACA,KACA,MACA,QACA,QACA,QACA,SACA,UACA,SACA,MACA,MACA,UACA,SACA,SACA,WACA,SACA,WACA,QACA,YACA,MACA,SACA,SACA,QACA,QACA,QACA,MACA,SACA,QACA,aACA,MACA,SACA,OACA,QACA,SACA,UACA,SACA,UACA,QACA,MACA,SACA,KACA,MACA,QACA,QACA,MACA,SACA,KACA,MACA,SACA,SACA,YACA,SACA,OACA,SACA,OACA,aACA,SACA,SACA,QACA,SACA,OACA,QACA,UACA,SACA,KACA,MACA,MACA,OACA,SACA,OACA,aACA,WACA,YACA,QACA,MACA,QACA,QACA,MACA,OACA,QACA,SACA,SACA,OACA,UACA,SACA,OACA,UACA,OACA,QACA,OACA,SACA,MACA,SACA,OACA,WACA,SACA,OACA,OACA,SACA,OACA,WACA,WACA,SACA,MACA,QACA,OACA,QACA,UACA,WACA,UACA,SACA,aACA,MACA,KACA,QACA,OACA,OACA,OACA,OACA,QACA,QACA,OACA,UACA,YACA,WACA,SACA,SACA,UACA,SACA,WACA,MACA,SACA,UACA,YACA,UACA,MACA,QACA,OACA,YACA,UACA,OACA,OACA,OACA,SACA,MACA,QACA,SACA,SACA,QACA,YACA,QACA,SACA,SACA,QACA,UACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,OACA,MACA,SACA,UACA,MACA,QACA,UACA,MACA,MACA,SACA,OACA,YACA,MACA,OACA,OACA,QACA,WACA,UACA,MACA,OACA,SACA,SACA,QACA,aACA,YACA,aACA,YACA,aACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,OACA,QACA,YACA,SACA,QACA,QACA,QACA,UACA,OACA,OACA,OACA,YACA,WACA,QACA,QACA,QACA,OACA,MACA,WACA,SACA,OACA,OACA,SACA,OACA,OACA,SACA,MACA,OACA,WACA,aACA,OACA,OACA,OACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,MACA,OACA,UACA,MACA,SACA,QACA,QACA,MACA,UACA,WACA,QACA,QACA,OACA,SACA,QACA,QACA,QACA,QACA,YACA,SACA,SACA,UACA,SACA,QACA,QACA,SACA,SACA,aACA,QACA,QACA,YACA,QACA,SACA,QACA,QACA,UACA,UACA,QACA,QACA,SACA,SACA,SACA,MACA,UACA,MACA,QACA,QACA,WACA,QACA,OACA,OACA,SACA,MACA,YACA,OACA,MACA,QACA,SACA,QACA,OACA,QACA,OACA,MACA,OACA,SACA,WACA,OACA,MACA,UACA,OACA,SACA,YACA,YACA,aACA,eACA,SACA,aACA,MACA,OACA,KACA,MACA,MACA,UACA,QACA,UACA,SACA,OACA,OACA,WACA,OACA,OACA,SACA,UACA,OACA,QACA,OACA,WACA,MACA,QACA,SACA,SACA,cACA,QACA,OACA,SACA,SACA,QACA,QACA,SACA,MACA,OACA,UACA,UACA,MACA,OACA,YACA,OACA,UACA,WACA,eACA,UACA,YACA,SACA,WACA,SACA,QACA,OACA,QACA,OACA,OACA,UACA,SACA,MACA,UACA,QACA,UACA,cACA,UACA,SACA,SACA,SACA,QACA,OACA,UACA,OACA,SACA,OACA,SACA,SACA,UACA,YACA,QACA,QACA,QACA,WACA,SACA,SACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,WACA,QACA,QACA,SACA,SACA,QACA,OACA,QACA,UACA,QACA,QACA,YACA,WACA,QACA,SACA,UACA,OACA,QACA,OACA,WACA,YACA,SACA,SACA,OACA,SACA,QACA,SACA,WACA,YACA,SACA,QACA,YACA,SACA,SACA,UACA,OACA,QACA,OACA,QACA,YACA,YACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,SACA,QACA,UACA,WACA,QACA,SACA,SACA,QACA,OACA,QACA,QACA,QACA,OACA,QACA,OACA,MACA,UACA,QACA,UACA,SACA,MACA,UACA,SACA,YACA,OACA,OACA,SACA,UACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,UACA,YACA,OACA,UACA,MACA,OACA,SACA,UACA,SACA,UACA,OACA,SACA,OACA,SACA,OACA,OACA,OACA,OACA,SACA,UACA,OACA,MACA,UACA,SACA,QACA,QACA,QACA,WACA,QACA,UACA,UACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,WACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,YACA,QACA,SACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,UACA,OACA,QACA,WACA,aACA,OACA,QACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,QACA,MACA,OACA,MACA,OACA,MACA,WACA,SACA,OACA,OACA,QACA,UACA,QACA,UACA,UACA,WACA,MACA,OACA,UACA,MACA,MACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,OACA,QACA,SACA,UACA,QACA,SACA,YACA,OACA,OACA,WACA,UACA,OACA,OACA,OACA,OACA,WACA,OACA,MACA,WACA,UACA,OACA,OACA,OACA,OACA,QACA,WACA,SACA,OACA,OACA,OACA,OACA,SACA,SACA,UACA,UACA,MACA,UACA,SACA,UACA,WACA,SACA,UACA,SACA,OACA,UACA,QACA,MACA,UACA,MACA,SACA,MACA,OACA,OACA,aACA,YACA,MACA,MACA,OACA,OACA,YACA,SACA,MACA,SACA,YACA,OACA,QACA,WACA,OACA,UACA,UACA,QACA,OACA,QACA,SACA,KACA,OACA,SACA,OACA,UACA,MACA,OACA,SACA,QACA,OACA,SACA,QACA,OACA,WACA,WACA,WACA,OACA,MACA,SACA,QACA,OACA,OACA,aACA,WACA,QACA,OACA,QACA,QACA,OACA,SACA,OACA,UACA,QACA,QACA,UACA,aACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,SACA,OACA,QACA,QACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,QACA,OACA,UACA,OACA,MACA,QACA,OACA,MACA,KACA,QACA,WACA,SACA,SACA,SACA,QACA,QACA,SACA,WACA,cACA,WACA,SACA,MACA,MACA,OACA,YACA,QACA,MACA,SACA,QACA,SACA,WACA,UACA,QACA,SACA,QACA,WACA,QACA,QACA,SACA,SACA,SACA,MACA,OACA,UACA,OACA,QACA,YACA,WACA,WACA,aACA,aACA,OACA,QACA,SACA,WACA,UACA,WACA,SACA,OACA,SACA,UACA,QACA,MACA,UACA,QACA,OACA,SACA,OACA,UACA,OACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,SACA,MACA,QACA,MACA,UACA,OACA,SACA,OACA,UACA,UACA,UACA,UACA,OACA,SACA,MACA,SACA,QACA,QACA,WACA,OACA,QACA,UACA,WACA,MACA,OACA,OACA,OACA,OACA,SACA,OACA,QACA,QACA,MACA,MACA,SACA,QACA,OACA,UACA,QACA,QACA,MACA,QACA,SACA,OACA,OACA,OACA,UACA,OACA,OACA,SACA,SACA,OACA,UACA,cACA,YACA,YACA,SACA,QACA,OACA,YACA,OACA,MACA,OACA,OACA,MACA,OACA,QACA,QACA,OACA,QACA,aACA,OACA,OACA,QACA,OACA,QACA,SACA,OACA,YACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,SACA,UACA,UACA,MACA,OACA,MACA,QACA,OACA,QACA,SACA,YACA,OACA,OACA,OACA,UACA,OACA,WACA,YACA,MACA,WACA,SACA,SACA,UACA,SACA,YACA,OACA,OACA,OACA,QACA,UACA,QACA,UACA,SACA,QACA,WACA,OACA,WACA,SACA,MACA,QACA,OACA,UACA,SACA,UACA,SACA,QACA,OACA,SACA,QACA,SACA,WACA,aACA,WACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,MACA,QACA,OACA,OACA,QACA,MACA,QACA,MACA,YACA,UACA,QACA,OACA,SACA,SACA,OACA,OACA,SACA,UACA,SACA,MACA,WACA,OACA,SACA,OACA,MACA,OACA,QACA,UACA,SACA,YACA,YACA,YACA,MACA,UACA,QACA,OACA,cACA,OACA,OACA,QACA,SACA,OACA,SACA,SACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,KACA,QACA,OACA,OACA,OACA,SACA,MACA,MACA,YACA,OACA,SACA,WACA,OACA,OACA,OACA,QACA,UACA,UACA,UACA,WACA,eACA,WACA,QACA,QACA,aACA,MACA,SACA,aACA,OACA,OACA,WACA,QACA,QACA,QACA,aACA,gBACA,gBACA,cACA,UACA,cACA,UACA,WACA,aACA,QACA,SACA,aACA,QACA,cACA,WACA,QACA,SACA,YACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,MACA,MACA,YACA,MACA,KACA,QACA,MACA,SACA,OACA,OACA,UACA,UACA,OACA,OACA,OACA,MACA,SACA,OACA,UACA,eACA,SACA,cACA,OACA,SACA,UACA,YACA,QACA,SACA,OACA,SACA,WACA,WACA,OACA,OACA,OACA,UACA,OACA,UACA,MACA,SACA,QACA,SACA,QACA,MACA,QACA,UACA,OACA,OACA,OACA,UACA,SACA,OACA,MACA,WACA,WACA,KACA,OACA,WACA,OACA,SACA,UACA,OACA,OACA,UACA,QACA,QACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,OACA,QACA,QACA,SACA,OACA,SACA,UACA,MACA,MACA,WACA,MACA,OACA,OACA,OACA,SACA,OACA,UACA,OACA,MACA,UACA,MACA,SACA,OACA,OACA,UACA,OACA,WACA,UACA,QACA,MACA,UACA,OACA,OACA,MACA,OACA,MACA,OACA,UACA,MACA,QACA,OACA,KACA,MACA,MACA,OACA,SACA,OACA,UACA,SACA,OACA,OACA,SACA,WACA,SACA,QACA,WACA,YACA,OACA,QACA,OACA,OACA,OACA,OACA,MACA,OACA,UACA,WACA,OACA,QACA,YACA,YACA,OACA,WACA,OACA,MACA,QACA,QACA,OACA,QACA,WACA,YACA,YACA,MACA,UACA,OACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,SACA,SACA,OACA,OACA,SACA,SACA,UACA,QACA,OACA,UACA,OACA,MACA,OACA,IACA,MACA,MACA,MACA,OACA,QACA,KACA,MACA,OACA,MACA,YACA,aACA,UACA,KACA,OACA,SACA,SACA,SACA,SACA,UACA,MACA,MACA,SACA,SACA,UACA,UACA,SACA,SACA,aACA,cACA,OACA,SACA,OACA,KACA,SACA,QACA,KACA,MACA,OACA,SACA,OACA,QACA,MACA,SACA,QACA,OACA,MACA,UACA,MACA,MACA,MACA,QACA,YACA,OACA,MACA,MACA,SACA,OACA,OACA,SACA,QACA,UACA,MACA,SACA,SACA,QACA,MACA,QACA,QACA,OACA,OACA,OACA,SACA,OACA,OACA,OACA,OACA,OACA,SACA,MACA,OACA,MACA,OACA,SACA,OACA,SACA,WACA,OACA,UACA,OACA,UACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,SACA,OACA,QACA,OACA,OACA,QACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,WACA,UACA,MACA,OACA,QACA,OACA,OACA,OACA,OACA,QACA,UACA,MACA,OACA,SACA,MACA,OACA,OACA,SACA,OACA,OACA,OACA,OACA,QACA,UACA,QACA,UACA,QACA,UACA,MACA,OACA,MACA,QACA,WACA,OACA,SACA,OACA,SACA,MACA,QACA,SACA,UACA,UACA,QACA,UACA,UACA,OACA,OACA,MACA,MACA,OACA,OACA,QACA,YACA,YACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,MACA,OACA,SACA,MACA,SACA,OACA,QACA,SACA,QACA,SACA,SACA,OACA,OACA,OACA,SACA,OACA,aACA,MACA,OACA,SACA,WACA,OACA,OACA,UACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,SACA,QACA,MACA,OACA,QACA,SACA,OACA,QACA,QACA,UACA,YACA,MACA,OACA,WACA,QACA,OACA,OACA,UACA,UACA,QACA,OACA,SACA,OACA,OACA,QACA,MACA,UACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,QACA,OACA,OACA,SACA,WACA,UACA,QACA,OACA,OACA,SACA,MACA,QACA,SACA,WACA,MACA,MACA,QACA,QACA,UACA,KACA,SACA,OACA,OACA,QACA,QACA,UACA,OACA,WACA,OACA,UACA,OACA,SACA,MACA,OACA,OACA,QACA,OACA,UACA,MACA,QACA,MACA,OACA,SACA,WACA,QACA,SACA,OACA,OACA,UACA,OACA,QACA,UACA,OACA,OACA,QACA,OACA,SACA,SACA,WACA,OACA,OACA,WACA,UACA,QACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,QACA,MACA,OACA,YACA,QACA,MACA,OACA,UACA,SACA,OACA,OACA,SACA,SACA,QACA,QACA,WACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,MACA,OACA,OACA,MACA,QACA,MACA,OACA,WACA,SACA,QACA,OACA,KACA,SACA,OACA,OACA,MACA,SACA,SACA,QACA,UACA,OACA,OACA,SACA,SACA,OACA,OACA,UACA,OACA,SACA,UACA,QACA,WACA,eACA,UACA,QACA,OACA,MACA,QACA,YACA,MACA,OACA,YACA,OACA,SACA,OACA,SACA,QACA,YACA,OACA,WACA,SACA,KACA,SACA,MACA,QACA,QACA,OACA,OACA,MACA,QACA,WACA,OACA,MACA,OACA,UACA,SACA,WACA,MACA,UACA,SACA,QACA,MACA,MACA,MACA,UACA,OACA,OACA,QACA,UACA,UACA,MACA,KACA,MACA,QACA,SACA,UACA,QACA,KACA,MACA,MACA,gaACA,UACA,UACA,SACA,MACA,QACA,QACA,OACA,SACA,SACA,UACA,MACA,QACA,MACA,SACA,QACA,OACA,OACA,SACA,MACA,OACA,YACA,OACA,OACA,OACA,SACA,MACA,QACA,UACA,OACA,QACA,QACA,OACA,QACA,QACA,QACA,WACA,UACA,OACA,SACA,aACA,YACA,WACA,YACA,WACA,SACA,WACA,SACA,OACA,OACA,OACA,SACA,aACA,OACA,QACA,SACA,OACA,OACA,SACA,YACA,SACA,SACA,OACA,SACA,OACA,OACA,OACA,MACA,UACA,SACA,QACA,OACA,WACA,OACA,UACA,UACA,MACA,SACA,WACA,QACA,OACA,SACA,QACA,WACA,SACA,OACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,WACA,QACA,SACA,QACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,SACA,OACA,OACA,OACA,UACA,QACA,SACA,MACA,QACA,QACA,OACA,SACA,QACA,OACA,OACA,QACA,WACA,MACA,UACA,SACA,QACA,QACA,UACA,QACA,QACA,WACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,QACA,SACA,MACA,OACA,WACA,UACA,OACA,QACA,UACA,QACA,SACA,OACA,MACA,MACA,QACA,OACA,MACA,UACA,MACA,OACA,SACA,SACA,MACA,MACA,QACA,OACA,SACA,UACA,QACA,OACA,SACA,OACA,OACA,SACA,UACA,UACA,SACA,SACA,MACA,UACA,YACA,SACA,WACA,UACA,SACA,WACA,SACA,SACA,OACA,SACA,QACA,SACA,SACA,OACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,MACA,SACA,OACA,QACA,SACA,QACA,MACA,OACA,MACA,OACA,OACA,SACA,QACA,OACA,WACA,OACA,QACA,MACA,SACA,OACA,QACA,OACA,QACA,SACA,OACA,OACA,SACA,OACA,OACA,UACA,OACA,OACA,OACA,UACA,MACA,SACA,QACA,QACA,QACA,MACA,UACA,QACA,MACA,SACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,OACA,SACA,UACA,OACA,OACA,QACA,MACA,OACA,MACA,SACA,UACA,OACA,SACA,OACA,OACA,WACA,SACA,QACA,QACA,OACA,OACA,OACA,OACA,QACA,WACA,OACA,OACA,MACA,OACA,MACA,QACA,eACA,WACA,UACA,SACA,OACA,UACA,MACA,MACA,OACA,SACA,QACA,QACA,SACA,YACA,cACA,eACA,aACA,SACA,QACA,QACA,SACA,UACA,SACA,SACA,QACA,QACA,MACA,OACA,OACA,SACA,SACA,OACA,SACA,SACA,MACA,SACA,OACA,OACA,OACA,OACA,SACA,SACA,OACA,UACA,OACA,OACA,QACA,OACA,WACA,WACA,YACA,UACA,QACA,UACA,MACA,UACA,SACA,aACA,QACA,YACA,UACA,UACA,UACA,MACA,QACA,SACA,QACA,QACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,MACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,QACA,QACA,QACA,WACA,QACA,UACA,QACA,OACA,QACA,QACA,OACA,YACA,QACA,QACA,QACA,OACA,WACA,QACA,QACA,OACA,SACA,WACA,YACA,QACA,SACA,OACA,SACA,OACA,MACA,OACA,WACA,OACA,WACA,WACA,OACA,QACA,OACA,UACA,SACA,OACA,OACA,QACA,SACA,SACA,MACA,QACA,OACA,SACA,SACA,OACA,MACA,MACA,MACA,QACA,SACA,MACA,UACA,MACA,UACA,QACA,QACA,OACA,QACA,SACA,MACA,OACA,OACA,QACA,MACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,SACA,SACA,QACA,QACA,OACA,QACA,QACA,OACA,UACA,UACA,WACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,WACA,SACA,OACA,QACA,WACA,YACA,QACA,OACA,KACA,OACA,OACA,MACA,QACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,OACA,OACA,WACA,UACA,UACA,YACA,WACA,YACA,YACA,MACA,OACA,OACA,OACA,SACA,QACA,OACA,OACA,QACA,OACA,OACA,QACA,WACA,QACA,QACA,QACA,UACA,QACA,UACA,QACA,SACA,QACA,QACA,WACA,QACA,QACA,SACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,QACA,QACA,QACA,QACA,QACA,OACA,SACA,SACA,aACA,WACA,SACA,SACA,SACA,UACA,WACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,YACA,UACA,QACA,QACA,UACA,QACA,OACA,OACA,WACA,QACA,SACA,QACA,QACA,YACA,QACA,OACA,SACA,QACA,WACA,QACA,QACA,QACA,QACA,QACA,OACA,UACA,WACA,QACA,QACA,UACA,QACA,SACA,QACA,QACA,WACA,UACA,WACA,QACA,QACA,aACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,SACA,QACA,OACA,MACA,SACA,MACA,SACA,YACA,OACA,OACA,WACA,QACA,UACA,SACA,WACA,SACA,UACA,OACA,SACA,UACA,WACA,UACA,OACA,QACA,OACA,OACA,QACA,QACA,UACA,QACA,QACA,YACA,aACA,QACA,QACA,QACA,OACA,WACA,QACA,SACA,QACA,QACA,QACA,aACA,aACA,SACA,OACA,MACA,OACA,SACA,OACA,QACA,SACA,OACA,OACA,SACA,OACA,OACA,MACA,OACA,MACA,OACA,MACA,QACA,OACA,QACA,SACA,MACA,MACA,QACA,UACA,OACA,OACA,QACA,WACA,QACA,YACA,OACA,SACA,MACA,SACA,OACA,OACA,WACA,OACA,OACA,QACA,SACA,WACA,eACA,OACA,SACA,MACA,UACA,OACA,QACA,OACA,OACA,QACA,QACA,OACA,SACA,UACA,UACA,UACA,QACA,QACA,UACA,OACA,QACA,QACA,QACA,UACA,WACA,SACA,OACA,QACA,QACA,SACA,UACA,WACA,SACA,QACA,QACA,SACA,SACA,UACA,QACA,SACA,QACA,UACA,WACA,MACA,OACA,SACA,SACA,MACA,QACA,QACA,OACA,OACA,MACA,SACA,OACA,MACA,SACA,OACA,QACA,QACA,KACA,OACA,YACA,QACA,UACA,QACA,MACA,WACA,SACA,OACA,SACA,WACA,MACA,OACA,SACA,UACA,MACA,OACA,OACA,OACA,QACA,aACA,YACA,MACA,OACA,OACA,OACA,QACA,MACA,SACA,UACA,QACA,QACA,OACA,MACA,QACA,QACA,QACA,QACA,QACA,OACA,OACA,WACA,QACA,OACA,QACA,WACA,QACA,OACA,OACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,MACA,MACA,UACA,MACA,QACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,OACA,MACA,OACA,WACA,QACA,QACA,aACA,YACA,UACA,SACA,aACA,SACA,aACA,UACA,SACA,UACA,SACA,SACA,SACA,UACA,SACA,aACA,QACA,YACA,KACA,OACA,QACA,QACA,SACA,WACA,SACA,SACA,KACA,MACA,OACA,SACA,YACA,SACA,WACA,QACA,OACA,YACA,SACA,OACA,SACA,UACA,OACA,UACA,OACA,SACA,QACA,UACA,QACA,OACA,MACA,QACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,MACA,OACA,OACA,MACA,OACA,SACA,UACA,SACA,QACA,QACA,WACA,QACA,aACA,aACA,OACA,MACA,MACA,UACA,KACA,OACA,WACA,SACA,SACA,SACA,OACA,QACA,UACA,QACA,MACA,OACA,UACA,YACA,MACA,OACA,OACA,QACA,OACA,QACA,UACA,OACA,OACA,OACA,QACA,OACA,UACA,MACA,QACA,QACA,OACA,SACA,QACA,QACA,OACA,WACA,QACA,QACA,QACA,OACA,UACA,QACA,SACA,UACA,UACA,UACA,QACA,MACA,QACA,QACA,SACA,OACA,QACA,QACA,MACA,SACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,SACA,MACA,OACA,QACA,WACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,MACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,MACA,SACA,YACA,QACA,OACA,SACA,aACA,QACA,OACA,SACA,OACA,OACA,OACA,SACA,UACA,QACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,WACA,QACA,OACA,OACA,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","sources":["./node_modules/process/browser.js","./node_modules/path-browserify/index.js","./node_modules/syllable/node_modules/pluralize/pluralize.js","./node_modules/normalize-strings/index.js","./node_modules/syllable/index.js","./node_modules/normalize-strings/charmap.json","./node_modules/syllable/problematic.json","./node_modules/text-readability/main.js","./node_modules/pluralize/pluralize.js","./node_modules/text-readability/easy_words.js","./src/index.js"],"sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Upper cased words. E.g. \"HELLO\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word\n   * @param  {number}  count\n   * @param  {boolean} inclusive\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['whiskey', 'whiskies']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/(m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/(m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],\n    [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'alcohol',\n    'ammo',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'manga',\n    'news',\n    'pike',\n    'plankton',\n    'pliers',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transporation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","(function(global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return factory(global, global.document);\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(global, global.document);\n  } else {\n      global.normalize = factory(global, global.document);\n  }\n} (typeof window !== 'undefined' ? window : this, function (window, document) {\n  var charmap = require('./charmap.json');\n  var regex = null;\n  var current_charmap;\n  var old_charmap;\n\n  function normalize(str, custom_charmap) {\n    old_charmap = current_charmap;\n    current_charmap = custom_charmap || charmap;\n\n    regex = (regex && old_charmap === current_charmap) ? regex : buildRegExp(current_charmap);\n\n    return str.replace(regex, function(charToReplace) {\n      return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;\n    });\n  }\n\n  function buildRegExp(charmap){\n     return new RegExp('[' + Object.keys(charmap).map(function(code) {return String.fromCharCode(code); }).join(' ') + ']', 'g');\n   }\n\n  return normalize;\n}));\n","'use strict'\n\nvar pluralize = require('pluralize')\nvar normalize = require('normalize-strings')\nvar problematic = require('./problematic.json')\n\nmodule.exports = syllables\n\nvar own = {}.hasOwnProperty\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  [\n    'cia(?:l|$)',\n    'tia',\n    'cius',\n    'cious',\n    '[^aeiou]giu',\n    '[aeiouy][^aeiouy]ion',\n    'iou',\n    'sia$',\n    'eous$',\n    '[oa]gue$',\n    '.[^aeiuoycgltdb]{2,}ed$',\n    '.ely$',\n    '^jua',\n    'uai',\n    'eau',\n    '^busi$',\n    '(?:[aeiouy](?:' +\n      [\n        '[bcfgklmnprsvwxyz]',\n        'ch',\n        'dg',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'n[cgn]',\n        'r[bcnsv]',\n        'squ',\n        's[chkls]',\n        'th'\n      ].join('|') +\n      ')ed$)',\n    '(?:[aeiouy](?:' +\n      [\n        '[bdfklmnprstvy]',\n        'ch',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'nn',\n        'r[nsv]',\n        'squ',\n        's[cklst]',\n        'th'\n      ].join('|') +\n      ')es$)'\n  ].join('|'),\n  'g'\n)\n\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy](?:' +\n    [\n      '[bcdfgklmnprstvyz]',\n      'ch',\n      'dg',\n      'g[hn]',\n      'l[lv]',\n      'mm',\n      'n[cgn]',\n      'r[cnsv]',\n      'squ',\n      's[cklst]',\n      'th'\n    ].join('|') +\n    ')e$',\n  'g'\n)\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(?:' +\n    [\n      '([^aeiouy])\\\\1l',\n      '[^aeiouy]ie(?:r|s?t)',\n      '[aeiouym]bl',\n      'eo',\n      'ism',\n      'asm',\n      'thm',\n      'dnt',\n      'snt',\n      'uity',\n      'dea',\n      'gean',\n      'oa',\n      'ua',\n      'react?',\n      'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'eings?',\n      '[aeiouy]sh?e[rs]'\n    ].join('|') +\n    ')$',\n  'g'\n)\n\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  [\n    'creat(?!u)',\n    '[^gq]ua[^auieo]',\n    '[aeiou]{3}',\n    '^(?:ia|mc|coa[dglx].)',\n    '^re(app|es|im|us)'\n  ].join('|'),\n  'g'\n)\n\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  [\n    '[^aeiou]y[ae]',\n    '[^l]lien',\n    'riet',\n    'dien',\n    'iu',\n    'io',\n    'ii',\n    'uen',\n    'real',\n    'iell',\n    'eo[^aeiou]',\n    '[aeiou]y[aeiou]'\n  ].join('|'),\n  'g'\n)\n\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/\n\n// Expression to match single syllable pre- and suffixes.\nvar EXPRESSION_SINGLE = new RegExp(\n  [\n    '^(?:' +\n      [\n        'un',\n        'fore',\n        'ware',\n        'none?',\n        'out',\n        'post',\n        'sub',\n        'pre',\n        'pro',\n        'dis',\n        'side',\n        'some'\n      ].join('|') +\n      ')',\n    '(?:' +\n      [\n        'ly',\n        'less',\n        'some',\n        'ful',\n        'ers?',\n        'ness',\n        'cians?',\n        'ments?',\n        'ettes?',\n        'villes?',\n        'ships?',\n        'sides?',\n        'ports?',\n        'shires?',\n        'tion(?:ed|s)?'\n      ].join('|') +\n      ')$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match double syllable pre- and suffixes.\nvar EXPRESSION_DOUBLE = new RegExp(\n  [\n    '^' +\n      '(?:' +\n      [\n        'above',\n        'anti',\n        'ante',\n        'counter',\n        'hyper',\n        'afore',\n        'agri',\n        'infra',\n        'intra',\n        'inter',\n        'over',\n        'semi',\n        'ultra',\n        'under',\n        'extra',\n        'dia',\n        'micro',\n        'mega',\n        'kilo',\n        'pico',\n        'nano',\n        'macro',\n        'somer'\n      ].join('|') +\n      ')',\n    '(?:' + ['fully', 'berry', 'woman', 'women', 'edly'].join('|') + ')$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match triple syllable suffixes.\nvar EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g\n\n// Expression to split on word boundaries.\nvar SPLIT = /\\b/g\n\n// Expression to merge elision.\nvar APOSTROPHE = /['’]/g\n\n// Expression to remove non-alphabetic characters from a given value.\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g\n\n// Wrapper to support multiple word-parts (GH-11).\nfunction syllables(value) {\n  var values = normalize(String(value))\n    .toLowerCase()\n    .replace(APOSTROPHE, '')\n    .split(SPLIT)\n  var length = values.length\n  var index = -1\n  var total = 0\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''))\n  }\n\n  return total\n}\n\n// Get syllables in a given value.\nfunction syllable(value) {\n  var count = 0\n  var index\n  var length\n  var singular\n  var parts\n  var addOne\n  var subtractOne\n\n  if (value.length === 0) {\n    return count\n  }\n\n  // Return early when possible.\n  if (value.length < 3) {\n    return 1\n  }\n\n  // If `value` is a hard to count, it might be in `problematic`.\n  if (own.call(problematic, value)) {\n    return problematic[value]\n  }\n\n  // Additionally, the singular word might be in `problematic`.\n  singular = pluralize(value, 1)\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular]\n  }\n\n  addOne = returnFactory(1)\n  subtractOne = returnFactory(-1)\n\n  // Count some prefixes and suffixes, and remove their matched ranges.\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1))\n\n  // Count multiple consonants.\n  parts = value.split(/[^aeiouy]+/)\n  index = -1\n  length = parts.length\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++\n    }\n  }\n\n  // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne)\n\n  // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne)\n\n  // Make sure at least on is returned.\n  return count || 1\n\n  // Define scoped counters, to be used in `String#replace()` calls.\n  // The scoped counter removes the matched value from the input.\n  function countFactory(addition) {\n    return counter\n    function counter() {\n      count += addition\n      return ''\n    }\n  }\n\n  // Define scoped counters, to be used in `String#replace()` calls.\n  // The scoped counter does not remove the matched value from the input.\n  function returnFactory(addition) {\n    return returner\n    function returner($0) {\n      count += addition\n      return $0\n    }\n  }\n}\n","{\"105\":\"i\",\"192\":\"A\",\"193\":\"A\",\"194\":\"A\",\"195\":\"A\",\"196\":\"A\",\"197\":\"A\",\"199\":\"C\",\"200\":\"E\",\"201\":\"E\",\"202\":\"E\",\"203\":\"E\",\"204\":\"I\",\"205\":\"I\",\"206\":\"I\",\"207\":\"I\",\"209\":\"N\",\"210\":\"O\",\"211\":\"O\",\"212\":\"O\",\"213\":\"O\",\"214\":\"O\",\"216\":\"O\",\"217\":\"U\",\"218\":\"U\",\"219\":\"U\",\"220\":\"U\",\"221\":\"Y\",\"224\":\"a\",\"225\":\"a\",\"226\":\"a\",\"227\":\"a\",\"228\":\"a\",\"229\":\"a\",\"231\":\"c\",\"232\":\"e\",\"233\":\"e\",\"234\":\"e\",\"235\":\"e\",\"236\":\"i\",\"237\":\"i\",\"238\":\"i\",\"239\":\"i\",\"241\":\"n\",\"242\":\"o\",\"243\":\"o\",\"244\":\"o\",\"245\":\"o\",\"246\":\"o\",\"248\":\"o\",\"249\":\"u\",\"250\":\"u\",\"251\":\"u\",\"252\":\"u\",\"253\":\"y\",\"255\":\"y\",\"256\":\"A\",\"257\":\"a\",\"258\":\"A\",\"259\":\"a\",\"260\":\"A\",\"261\":\"a\",\"262\":\"C\",\"263\":\"c\",\"264\":\"C\",\"265\":\"c\",\"266\":\"C\",\"267\":\"c\",\"268\":\"C\",\"269\":\"c\",\"270\":\"D\",\"271\":\"d\",\"272\":\"D\",\"273\":\"d\",\"274\":\"E\",\"275\":\"e\",\"276\":\"E\",\"277\":\"e\",\"278\":\"E\",\"279\":\"e\",\"280\":\"E\",\"281\":\"e\",\"282\":\"E\",\"283\":\"e\",\"284\":\"G\",\"285\":\"g\",\"286\":\"G\",\"287\":\"g\",\"288\":\"G\",\"289\":\"g\",\"290\":\"G\",\"291\":\"g\",\"292\":\"H\",\"293\":\"h\",\"294\":\"H\",\"295\":\"h\",\"296\":\"I\",\"297\":\"i\",\"298\":\"I\",\"299\":\"i\",\"300\":\"I\",\"301\":\"i\",\"302\":\"I\",\"303\":\"i\",\"304\":\"I\",\"308\":\"J\",\"309\":\"j\",\"310\":\"K\",\"311\":\"k\",\"313\":\"L\",\"314\":\"l\",\"315\":\"L\",\"316\":\"l\",\"317\":\"L\",\"318\":\"l\",\"319\":\"L\",\"320\":\"l\",\"321\":\"L\",\"322\":\"l\",\"323\":\"N\",\"324\":\"n\",\"325\":\"N\",\"326\":\"n\",\"327\":\"N\",\"328\":\"n\",\"332\":\"O\",\"333\":\"o\",\"334\":\"O\",\"335\":\"o\",\"336\":\"O\",\"337\":\"o\",\"338\":\"O\",\"339\":\"o\",\"340\":\"R\",\"341\":\"r\",\"342\":\"R\",\"343\":\"r\",\"344\":\"R\",\"345\":\"r\",\"346\":\"S\",\"347\":\"s\",\"348\":\"S\",\"349\":\"s\",\"350\":\"S\",\"351\":\"s\",\"352\":\"S\",\"353\":\"s\",\"354\":\"T\",\"355\":\"t\",\"356\":\"T\",\"357\":\"t\",\"358\":\"T\",\"359\":\"t\",\"360\":\"U\",\"361\":\"u\",\"362\":\"U\",\"363\":\"u\",\"364\":\"U\",\"365\":\"u\",\"366\":\"U\",\"367\":\"u\",\"368\":\"U\",\"369\":\"u\",\"370\":\"U\",\"371\":\"u\",\"372\":\"W\",\"373\":\"w\",\"374\":\"Y\",\"375\":\"y\",\"376\":\"Y\",\"377\":\"Z\",\"378\":\"z\",\"379\":\"Z\",\"380\":\"z\",\"381\":\"Z\",\"382\":\"z\",\"384\":\"b\",\"385\":\"B\",\"386\":\"B\",\"387\":\"b\",\"390\":\"O\",\"391\":\"C\",\"392\":\"c\",\"393\":\"D\",\"394\":\"D\",\"395\":\"D\",\"396\":\"d\",\"398\":\"E\",\"400\":\"E\",\"401\":\"F\",\"402\":\"f\",\"403\":\"G\",\"407\":\"I\",\"408\":\"K\",\"409\":\"k\",\"410\":\"l\",\"412\":\"M\",\"413\":\"N\",\"414\":\"n\",\"415\":\"O\",\"416\":\"O\",\"417\":\"o\",\"420\":\"P\",\"421\":\"p\",\"422\":\"R\",\"427\":\"t\",\"428\":\"T\",\"429\":\"t\",\"430\":\"T\",\"431\":\"U\",\"432\":\"u\",\"434\":\"V\",\"435\":\"Y\",\"436\":\"y\",\"437\":\"Z\",\"438\":\"z\",\"461\":\"A\",\"462\":\"a\",\"463\":\"I\",\"464\":\"i\",\"465\":\"O\",\"466\":\"o\",\"467\":\"U\",\"468\":\"u\",\"477\":\"e\",\"484\":\"G\",\"485\":\"g\",\"486\":\"G\",\"487\":\"g\",\"488\":\"K\",\"489\":\"k\",\"490\":\"O\",\"491\":\"o\",\"500\":\"G\",\"501\":\"g\",\"504\":\"N\",\"505\":\"n\",\"512\":\"A\",\"513\":\"a\",\"514\":\"A\",\"515\":\"a\",\"516\":\"E\",\"517\":\"e\",\"518\":\"E\",\"519\":\"e\",\"520\":\"I\",\"521\":\"i\",\"522\":\"I\",\"523\":\"i\",\"524\":\"O\",\"525\":\"o\",\"526\":\"O\",\"527\":\"o\",\"528\":\"R\",\"529\":\"r\",\"530\":\"R\",\"531\":\"r\",\"532\":\"U\",\"533\":\"u\",\"534\":\"U\",\"535\":\"u\",\"536\":\"S\",\"537\":\"s\",\"538\":\"T\",\"539\":\"t\",\"542\":\"H\",\"543\":\"h\",\"544\":\"N\",\"545\":\"d\",\"548\":\"Z\",\"549\":\"z\",\"550\":\"A\",\"551\":\"a\",\"552\":\"E\",\"553\":\"e\",\"558\":\"O\",\"559\":\"o\",\"562\":\"Y\",\"563\":\"y\",\"564\":\"l\",\"565\":\"n\",\"566\":\"t\",\"567\":\"j\",\"570\":\"A\",\"571\":\"C\",\"572\":\"c\",\"573\":\"L\",\"574\":\"T\",\"575\":\"s\",\"576\":\"z\",\"579\":\"B\",\"580\":\"U\",\"581\":\"V\",\"582\":\"E\",\"583\":\"e\",\"584\":\"J\",\"585\":\"j\",\"586\":\"Q\",\"587\":\"q\",\"588\":\"R\",\"589\":\"r\",\"590\":\"Y\",\"591\":\"y\",\"592\":\"a\",\"593\":\"a\",\"595\":\"b\",\"596\":\"o\",\"597\":\"c\",\"598\":\"d\",\"599\":\"d\",\"600\":\"e\",\"603\":\"e\",\"604\":\"e\",\"605\":\"e\",\"606\":\"e\",\"607\":\"j\",\"608\":\"g\",\"609\":\"g\",\"610\":\"g\",\"613\":\"h\",\"614\":\"h\",\"616\":\"i\",\"618\":\"i\",\"619\":\"l\",\"620\":\"l\",\"621\":\"l\",\"623\":\"m\",\"624\":\"m\",\"625\":\"m\",\"626\":\"n\",\"627\":\"n\",\"628\":\"n\",\"629\":\"o\",\"633\":\"r\",\"634\":\"r\",\"635\":\"r\",\"636\":\"r\",\"637\":\"r\",\"638\":\"r\",\"639\":\"r\",\"640\":\"r\",\"641\":\"r\",\"642\":\"s\",\"647\":\"t\",\"648\":\"t\",\"649\":\"u\",\"651\":\"v\",\"652\":\"v\",\"653\":\"w\",\"654\":\"y\",\"655\":\"y\",\"656\":\"z\",\"657\":\"z\",\"663\":\"c\",\"665\":\"b\",\"666\":\"e\",\"667\":\"g\",\"668\":\"h\",\"669\":\"j\",\"670\":\"k\",\"671\":\"l\",\"672\":\"q\",\"686\":\"h\",\"688\":\"h\",\"690\":\"j\",\"691\":\"r\",\"692\":\"r\",\"694\":\"r\",\"695\":\"w\",\"696\":\"y\",\"737\":\"l\",\"738\":\"s\",\"739\":\"x\",\"780\":\"v\",\"829\":\"x\",\"851\":\"x\",\"867\":\"a\",\"868\":\"e\",\"869\":\"i\",\"870\":\"o\",\"871\":\"u\",\"872\":\"c\",\"873\":\"d\",\"874\":\"h\",\"875\":\"m\",\"876\":\"r\",\"877\":\"t\",\"878\":\"v\",\"879\":\"x\",\"7424\":\"a\",\"7427\":\"b\",\"7428\":\"c\",\"7429\":\"d\",\"7431\":\"e\",\"7432\":\"e\",\"7433\":\"i\",\"7434\":\"j\",\"7435\":\"k\",\"7436\":\"l\",\"7437\":\"m\",\"7438\":\"n\",\"7439\":\"o\",\"7440\":\"o\",\"7441\":\"o\",\"7442\":\"o\",\"7443\":\"o\",\"7446\":\"o\",\"7447\":\"o\",\"7448\":\"p\",\"7449\":\"r\",\"7450\":\"r\",\"7451\":\"t\",\"7452\":\"u\",\"7453\":\"u\",\"7454\":\"u\",\"7455\":\"m\",\"7456\":\"v\",\"7457\":\"w\",\"7458\":\"z\",\"7522\":\"i\",\"7523\":\"r\",\"7524\":\"u\",\"7525\":\"v\",\"7680\":\"A\",\"7681\":\"a\",\"7682\":\"B\",\"7683\":\"b\",\"7684\":\"B\",\"7685\":\"b\",\"7686\":\"B\",\"7687\":\"b\",\"7690\":\"D\",\"7691\":\"d\",\"7692\":\"D\",\"7693\":\"d\",\"7694\":\"D\",\"7695\":\"d\",\"7696\":\"D\",\"7697\":\"d\",\"7698\":\"D\",\"7699\":\"d\",\"7704\":\"E\",\"7705\":\"e\",\"7706\":\"E\",\"7707\":\"e\",\"7710\":\"F\",\"7711\":\"f\",\"7712\":\"G\",\"7713\":\"g\",\"7714\":\"H\",\"7715\":\"h\",\"7716\":\"H\",\"7717\":\"h\",\"7718\":\"H\",\"7719\":\"h\",\"7720\":\"H\",\"7721\":\"h\",\"7722\":\"H\",\"7723\":\"h\",\"7724\":\"I\",\"7725\":\"i\",\"7728\":\"K\",\"7729\":\"k\",\"7730\":\"K\",\"7731\":\"k\",\"7732\":\"K\",\"7733\":\"k\",\"7734\":\"L\",\"7735\":\"l\",\"7738\":\"L\",\"7739\":\"l\",\"7740\":\"L\",\"7741\":\"l\",\"7742\":\"M\",\"7743\":\"m\",\"7744\":\"M\",\"7745\":\"m\",\"7746\":\"M\",\"7747\":\"m\",\"7748\":\"N\",\"7749\":\"n\",\"7750\":\"N\",\"7751\":\"n\",\"7752\":\"N\",\"7753\":\"n\",\"7754\":\"N\",\"7755\":\"n\",\"7764\":\"P\",\"7765\":\"p\",\"7766\":\"P\",\"7767\":\"p\",\"7768\":\"R\",\"7769\":\"r\",\"7770\":\"R\",\"7771\":\"r\",\"7774\":\"R\",\"7775\":\"r\",\"7776\":\"S\",\"7777\":\"s\",\"7778\":\"S\",\"7779\":\"s\",\"7786\":\"T\",\"7787\":\"t\",\"7788\":\"T\",\"7789\":\"t\",\"7790\":\"T\",\"7791\":\"t\",\"7792\":\"T\",\"7793\":\"t\",\"7794\":\"U\",\"7795\":\"u\",\"7796\":\"U\",\"7797\":\"u\",\"7798\":\"U\",\"7799\":\"u\",\"7804\":\"V\",\"7805\":\"v\",\"7806\":\"V\",\"7807\":\"v\",\"7808\":\"W\",\"7809\":\"w\",\"7810\":\"W\",\"7811\":\"w\",\"7812\":\"W\",\"7813\":\"w\",\"7814\":\"W\",\"7815\":\"w\",\"7816\":\"W\",\"7817\":\"w\",\"7818\":\"X\",\"7819\":\"x\",\"7820\":\"X\",\"7821\":\"x\",\"7822\":\"Y\",\"7823\":\"y\",\"7824\":\"Z\",\"7825\":\"z\",\"7826\":\"Z\",\"7827\":\"z\",\"7828\":\"Z\",\"7829\":\"z\",\"7835\":\"s\",\"7840\":\"A\",\"7841\":\"a\",\"7842\":\"A\",\"7843\":\"a\",\"7864\":\"E\",\"7865\":\"e\",\"7866\":\"E\",\"7867\":\"e\",\"7868\":\"E\",\"7869\":\"e\",\"7880\":\"I\",\"7881\":\"i\",\"7882\":\"I\",\"7883\":\"i\",\"7884\":\"O\",\"7885\":\"o\",\"7886\":\"O\",\"7887\":\"o\",\"7908\":\"U\",\"7909\":\"u\",\"7910\":\"U\",\"7911\":\"u\",\"7922\":\"Y\",\"7923\":\"y\",\"7924\":\"Y\",\"7925\":\"y\",\"7926\":\"Y\",\"7927\":\"y\",\"7928\":\"Y\",\"7929\":\"y\",\"8305\":\"i\",\"8341\":\"h\",\"8342\":\"k\",\"8343\":\"l\",\"8344\":\"m\",\"8345\":\"n\",\"8346\":\"p\",\"8347\":\"s\",\"8348\":\"t\",\"8450\":\"c\",\"8458\":\"g\",\"8459\":\"h\",\"8460\":\"h\",\"8461\":\"h\",\"8464\":\"i\",\"8465\":\"i\",\"8466\":\"l\",\"8467\":\"l\",\"8468\":\"l\",\"8469\":\"n\",\"8472\":\"p\",\"8473\":\"p\",\"8474\":\"q\",\"8475\":\"r\",\"8476\":\"r\",\"8477\":\"r\",\"8484\":\"z\",\"8488\":\"z\",\"8492\":\"b\",\"8493\":\"c\",\"8495\":\"e\",\"8496\":\"e\",\"8497\":\"f\",\"8498\":\"F\",\"8499\":\"m\",\"8500\":\"o\",\"8506\":\"q\",\"8513\":\"g\",\"8514\":\"l\",\"8515\":\"l\",\"8516\":\"y\",\"8517\":\"d\",\"8518\":\"d\",\"8519\":\"e\",\"8520\":\"i\",\"8521\":\"j\",\"8526\":\"f\",\"8579\":\"C\",\"8580\":\"c\",\"8765\":\"s\",\"8766\":\"s\",\"8959\":\"z\",\"8999\":\"x\",\"9746\":\"x\",\"9776\":\"i\",\"9866\":\"i\",\"10005\":\"x\",\"10006\":\"x\",\"10007\":\"x\",\"10008\":\"x\",\"10625\":\"z\",\"10626\":\"z\",\"11362\":\"L\",\"11364\":\"R\",\"11365\":\"a\",\"11366\":\"t\",\"11373\":\"A\",\"11374\":\"M\",\"11375\":\"A\",\"11390\":\"S\",\"11391\":\"Z\",\"19904\":\"i\",\"42893\":\"H\",\"42922\":\"H\",\"42923\":\"E\",\"42924\":\"G\",\"42925\":\"L\",\"42928\":\"K\",\"42929\":\"T\",\"62937\":\"x\"}","{\n  \"abalone\": 4,\n  \"abare\": 3,\n  \"abbruzzese\": 4,\n  \"abed\": 2,\n  \"aborigine\": 5,\n  \"abruzzese\": 4,\n  \"acreage\": 3,\n  \"adame\": 3,\n  \"adieu\": 2,\n  \"adobe\": 3,\n  \"anemone\": 4,\n  \"apache\": 3,\n  \"aphrodite\": 4,\n  \"apostrophe\": 4,\n  \"ariadne\": 4,\n  \"cafe\": 2,\n  \"calliope\": 4,\n  \"catastrophe\": 4,\n  \"chile\": 2,\n  \"chloe\": 2,\n  \"circe\": 2,\n  \"coyote\": 3,\n  \"daphne\": 2,\n  \"epitome\": 4,\n  \"eurydice\": 4,\n  \"euterpe\": 3,\n  \"every\": 2,\n  \"everywhere\": 3,\n  \"forever\": 3,\n  \"gethsemane\": 4,\n  \"guacamole\": 4,\n  \"hermione\": 4,\n  \"hyperbole\": 4,\n  \"jesse\": 2,\n  \"jukebox\": 2,\n  \"karate\": 3,\n  \"machete\": 3,\n  \"maybe\": 2,\n  \"newlywed\": 3,\n  \"penelope\": 4,\n  \"people\": 2,\n  \"persephone\": 4,\n  \"phoebe\": 2,\n  \"pulse\": 1,\n  \"queue\": 1,\n  \"recipe\": 3,\n  \"riverbed\": 3,\n  \"sesame\": 3,\n  \"shoreline\": 2,\n  \"simile\": 3,\n  \"snuffleupagus\": 5,\n  \"sometimes\": 2,\n  \"syncope\": 3,\n  \"tamale\": 3,\n  \"waterbed\": 3,\n  \"wednesday\": 2,\n  \"yosemite\": 4,\n  \"zoe\": 2\n}\n","const path = require('path')\nconst syllable = require('syllable')\nconst pluralize = require('pluralize')\nconst punctuationRE = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~]/g\nconst easyWords = require('./easy_words')\nconst easyWordSet = new Set(easyWords)\n\n// extends Math object\nMath.copySign = (x, y) => {\n  return x * (y / Math.abs(y))\n}\nMath.legacyRound = (number, points = 0) => {\n  const p = 10 ** points\n  // return float(math.floor((number * p) + math.copysign(0.5, number))) / p\n  return Math.floor((number * p) + Math.copySign(0.5, number)) / p\n}\n\nclass Readability {\n  static getGradeSuffix (grade) {\n    grade = Math.floor(grade)\n    // poor function fix this, gives { 22th and 23th grade }\n    const gradeMap = {\n      1: 'st',\n      2: 'nd',\n      3: 'rd'\n    }\n    return gradeMap[grade] ? gradeMap[grade] : 'th'\n  }\n  charCount (text, ignoreSpaces = true) {\n    if (ignoreSpaces) text = text.replace(/ /g, '')\n    return text.length\n  }\n  letterCount (text, ignoreSpaces = true) {\n    if (ignoreSpaces) text = text.replace(/ /g, '')\n    return this.removePunctuation(text).length\n  }\n  removePunctuation (text) {\n    text = text.replace(punctuationRE, '')\n    return text\n  }\n  static split (text) {\n    text = text.split(/,| |\\n|\\r/g)\n    text = text.filter(n => n)\n    return text\n  }\n  lexiconCount (text, removePunctuation = true) {\n    if (removePunctuation) text = this.removePunctuation(text)\n    text = text.split(/,| |\\n|\\r/g)\n    text = text.filter(n => n)\n    return text.length\n  }\n  syllableCount (text, lang = 'en-US') {\n    text = text.toLocaleLowerCase(lang)\n    text = this.removePunctuation(text)\n    if (!text) return 0\n    // eventually replace syllable\n    const count = syllable(text)\n    return count //  js lib overs compared to python\n  }\n  sentenceCount (text) {\n    let ignoreCount = 0\n    let sentences = text.split(/ *[.?!]['\")\\]]*[ |\\n](?=[A-Z])/g)\n    for (let sentence of sentences) {\n      if (this.lexiconCount(sentence) <= 2) ignoreCount += 1\n    }\n    const validSentences = sentences.length - ignoreCount\n    return validSentences > 1 ? validSentences : 1\n  }\n  averageSentenceLength (text) {\n    const asl = this.lexiconCount(text) / this.sentenceCount(text)\n    const returnVal = Math.legacyRound(asl, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageSyllablePerWord (text) {\n    const syllables = this.syllableCount(text)\n    const words = this.lexiconCount(text)\n    const syllablePerWord = syllables / words\n    const returnVal = Math.legacyRound(syllablePerWord, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageCharacterPerWord (text) {\n    const charactersPerWord = this.charCount(text) / this.lexiconCount(text)\n    const returnVal = Math.legacyRound(charactersPerWord, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageLetterPerWord (text) {\n    const lettersPerWord = this.letterCount(text) / this.lexiconCount(text)\n    const returnVal = Math.legacyRound(lettersPerWord, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageSentencePerWord (text) {\n    const sentencesPerWord = this.sentenceCount(text) / this.lexiconCount(text)\n    const returnVal = Math.legacyRound(sentencesPerWord, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  fleschReadingEase (text) {\n    const sentenceLength = this.averageSentenceLength(text)\n    const syllablesPerWord = this.averageSyllablePerWord(text)\n    const flesch = 206.835 - (1.015 * sentenceLength) - (84.6 * syllablesPerWord)\n    const returnVal = Math.legacyRound(flesch, 2)\n    return returnVal\n  }\n  fleschReadingEaseToGrade (score) {\n    if (score < 100 && score >= 90) return 5\n    else if (score < 90 && score >= 80) return 6\n    else if (score < 80 && score >= 70) return 7\n    else if (score < 70 && score >= 60) return 8.5\n    else if (score < 60 && score >= 50) return 11\n    else if (score < 50 && score >= 40) return 13 // college\n    else if (score < 40 && score >= 30) return 15\n    else return 16\n  }\n  fleschKincaidGrade (text) {\n    const sentenceLength = this.averageSentenceLength(text)\n    const syllablePerWord = this.averageSyllablePerWord(text)\n    const flesch = 0.39 * sentenceLength + 11.8 * syllablePerWord - 15.59\n    const returnVal = Math.legacyRound(flesch, 1)\n    return returnVal\n  }\n  polySyllableCount (text) {\n    let count = 0\n    let wrds\n    for (let word of Readability.split(text)) {\n      wrds = this.syllableCount(word)\n      if (wrds >= 3) count += 1\n    }\n    return count\n  }\n  smogIndex (text) {\n    const sentences = this.sentenceCount(text)\n    if (sentences >= 3) {\n      const polySyllab = this.polySyllableCount(text)\n      const smog = 1.043 * (30 * (polySyllab / sentences)) ** 0.5 + 3.1291\n      const returnVal = Math.legacyRound(smog, 1)\n      return !isNaN(returnVal) ? returnVal : 0.0\n    }\n    return 0.0\n  }\n  colemanLiauIndex (text) {\n    const letters = Math.legacyRound(this.averageLetterPerWord(text) * 100, 2)\n    const sentences = Math.legacyRound(this.averageSentencePerWord(text) * 100, 2)\n    const coleman = 0.058 * letters - 0.296 * sentences - 15.8\n    return Math.legacyRound(coleman, 2)\n  }\n  automatedReadabilityIndex (text) {\n    const characters = this.charCount(text)\n    const words = this.lexiconCount(text)\n    const sentences = this.sentenceCount(text)\n\n    const averageCharacterPerWord = characters / words\n    const averageWordPerSentence = words / sentences\n    const readability = (\n      (4.71 * Math.legacyRound(averageCharacterPerWord, 2)) +\n      (0.5 * Math.legacyRound(averageWordPerSentence, 2)) -\n      21.43\n    )\n    const returnVal = Math.legacyRound(readability, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  linsearWriteFormula (text) {\n    let easyWord = 0\n    let difficultWord = 0\n    let textList = Readability.split(text).slice(0, 100)\n\n    for (let word of textList) {\n      if (this.syllableCount(word) < 3) {\n        easyWord += 1\n      } else {\n        difficultWord += 1\n      }\n    }\n    text = textList.join(' ')\n    let number = (easyWord * 1 + difficultWord * 3) / this.sentenceCount(text)\n    let returnVal = number <= 20 ? (number - 2) / 2 : number / 2\n    returnVal = Math.legacyRound(returnVal, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  presentTense(word) {\n    // good enough for most long words -- we only care about \"difficult\" words\n    // of two or more syllables anyway.\n    // Doesn't work for words ending in \"e\" that aren't \"easy\"\n    if (word.length < 6)\n      return word\n    if (word.endsWith('ed')) {\n      if (easyWordSet.has(word.slice(0, -1)))\n        return word.slice(0, -1) // \"easy\" word ending in e\n      else\n        return word.slice(0, -2) // assume we remove \"ed\"\n    }\n    if (word.endsWith('ing')) {\n      const suffixIngToE = word.slice(0, -3) + \"e\" // e.g. forcing -> force\n      if (easyWordSet.has(suffixIngToE))\n        return suffixIngToE\n      else\n        return word.slice(0, -3)\n    }\n    return word\n  }\n  difficultWords (text, syllableThreshold = 2) {\n    const textList = text.match(/[\\w=‘’]+/g)\n    const diffWordsSet = new Set()\n    if (textList === null)\n      return diffWordsSet\n    for (let word of textList) {\n      const normalized = this.presentTense(pluralize(word.toLocaleLowerCase(), 1))\n      // console.log(`difficultWords(${word}): norm=${normalized}, `\n      //             `${this.syllableCount(word)} syllables, easy? ${easyWordSet.has(normalized)}`)\n      if (!easyWordSet.has(normalized) && this.syllableCount(word) >= syllableThreshold) {\n        diffWordsSet.add(word)\n      }\n    }\n    return [...diffWordsSet].length\n  }\n  daleChallReadabilityScore (text) {\n    const wordCount = this.lexiconCount(text)\n    const count = wordCount - this.difficultWords(text)\n    const per = (count / wordCount * 100)\n    if (isNaN(per)) return 0.0\n    const difficultWords = 100 - per\n    // console.log('difficult words : ', difficultWords)\n    let score = (0.1579 * difficultWords) + (0.0496 * this.averageSentenceLength(text))\n    if (difficultWords > 5) score += 3.6365\n    return Math.legacyRound(score, 2)\n  }\n  daleChallToGrade (score) {\n    if (score <= 4.9) return 4\n    if (score < 5.9) return 5\n    if (score < 6.9) return 7\n    if (score < 7.9) return 9\n    if (score < 8.9) return 11\n    if (score < 9.9) return 13\n    else return 16\n  }\n  gunningFog (text) {\n    const perDiffWords = (this.difficultWords(text, 3) / this.lexiconCount(text) * 100)\n    const grade = 0.4 * (this.averageSentenceLength(text) + perDiffWords)\n    const returnVal = Math.legacyRound(grade, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  lix (text) {\n    const words = Readability.split(text)\n    const wordsLen = words.length\n    const longWords = words.filter(wrd => wrd.length > 6).length\n    const perLongWords = longWords * 100 / wordsLen\n    const asl = this.averageSentenceLength(text)\n    const lix = asl + perLongWords\n    return Math.legacyRound(lix, 2)\n  }\n  rix (text) {\n    const words = Readability.split(text)\n    const longWordsCount = words.filter(wrd => wrd.length > 6).length\n    const sentencesCount = this.sentenceCount(text)\n    const rix = longWordsCount / sentencesCount\n    return !isNaN(rix) ? Math.legacyRound(rix, 2) : 0.0\n  }\n  textStandard (text, floatOutput = null) {\n    const grade = []\n    // Appending Flesch Kincaid Grade\n    let lower = Math.legacyRound(this.fleschKincaidGrade(text))\n    let upper = Math.ceil(this.fleschKincaidGrade(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    let score = this.fleschReadingEase(text)\n    let freGrade = this.fleschReadingEaseToGrade(score)\n    grade.push(freGrade)\n\n    // console.log('grade till now: \\n', grade)\n\n    lower = Math.legacyRound(this.smogIndex(text))\n    upper = Math.ceil(this.smogIndex(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending Coleman_Liau_Index\n    lower = Math.legacyRound(this.colemanLiauIndex(text))\n    upper = Math.ceil(this.colemanLiauIndex(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending Automated_Readability_Index\n    lower = Math.legacyRound(this.automatedReadabilityIndex(text))\n    upper = Math.ceil(this.automatedReadabilityIndex(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // console.log('grade till now : 2 : \\n', grade)\n\n    // Appending  Dale_Chall_Readability_Score\n    lower = Math.legacyRound(this.daleChallToGrade(this.daleChallReadabilityScore(text)))\n    upper = Math.ceil(this.daleChallToGrade(this.daleChallReadabilityScore(text)))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending linsearWriteFormula\n    lower = Math.legacyRound(this.linsearWriteFormula(text))\n    upper = Math.ceil(this.linsearWriteFormula(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending Gunning Fog Index\n    lower = Math.legacyRound(this.gunningFog(text))\n    upper = Math.ceil(this.gunningFog(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // d = Counter(grade)\n    // final_grade = d.most_common(1)\n    // score = final_grade[0][0]\n\n    // if float_output:\n    //     return float(score)\n    // else:\n    //     lower_score = int(score) - 1\n    //     upper_score = lower_score + 1\n    //     return \"{}{} and {}{} grade\".format(\n    //         lower_score, get_grade_suffix(lower_score),\n    //         upper_score, get_grade_suffix(upper_score)\n    //     )\n    // Finding the Readability Consensus based upon all the above tests\n    // console.log('grade List: ', grade)\n    const counterMap = [...new Set(grade)].map(x => [x, grade.filter(y => y === x).length])\n    const finalGrade = counterMap.reduce((x, y) => y[1] >= x[1] ? y : x)\n    score = finalGrade[0]\n    if (floatOutput) return score\n    const lowerScore = Math.floor(score) - 1\n    const upperScore = lowerScore + 1\n    return `${lowerScore}${Readability.getGradeSuffix(lowerScore)} and ${upperScore}${Readability.getGradeSuffix(upperScore)} grade`\n  }\n  textMedian (text) {\n    const grade = []\n    // Appending Flesch Kincaid Grade\n    grade.push(this.fleschKincaidGrade(text))\n\n    const score = this.fleschReadingEase(text)\n    const freGrade = this.fleschReadingEaseToGrade(score)\n    grade.push(freGrade)\n\n    grade.push(this.smogIndex(text))\n\n    // Appending Coleman_Liau_Index\n    grade.push(this.colemanLiauIndex(text))\n\n    // Appending Automated_Readability_Index\n    grade.push(this.automatedReadabilityIndex(text))\n\n    // Appending  Dale_Chall_Readability_Score\n    grade.push(this.daleChallToGrade(this.daleChallReadabilityScore(text)))\n\n    // Appending linsearWriteFormula\n    grade.push(this.linsearWriteFormula(text))\n\n    // Appending Gunning Fog Index\n    grade.push(this.gunningFog(text))\n\n    // compute median\n    grade.sort(function(a, b) { return a - b })\n    let half = Math.floor(grade.length / 2)\n    if (half & 0x1)\n      return (grade[half-1] + grade[half])/2\n    else\n      return grade[half]\n  }\n}\nconst readability = new Readability()\nmodule.exports = readability\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","const easyWords = [\r\n  \"a\",\r\n  \"able\",\r\n  \"aboard\",\r\n  \"about\",\r\n  \"above\",\r\n  \"absent\",\r\n  \"accept\",\r\n  \"accident\",\r\n  \"account\",\r\n  \"ache\",\r\n  \"aching\",\r\n  \"acorn\",\r\n  \"acre\",\r\n  \"across\",\r\n  \"act\",\r\n  \"acts\",\r\n  \"add\",\r\n  \"address\",\r\n  \"admire\",\r\n  \"adventure\",\r\n  \"afar\",\r\n  \"afraid\",\r\n  \"after\",\r\n  \"afternoon\",\r\n  \"afterward\",\r\n  \"afterwards\",\r\n  \"again\",\r\n  \"against\",\r\n  \"age\",\r\n  \"aged\",\r\n  \"ago\",\r\n  \"agree\",\r\n  \"ah\",\r\n  \"ahead\",\r\n  \"aid\",\r\n  \"aim\",\r\n  \"air\",\r\n  \"airfield\",\r\n  \"airplane\",\r\n  \"airport\",\r\n  \"airship\",\r\n  \"airy\",\r\n  \"alarm\",\r\n  \"alike\",\r\n  \"alive\",\r\n  \"all\",\r\n  \"alley\",\r\n  \"alligator\",\r\n  \"allow\",\r\n  \"almost\",\r\n  \"alone\",\r\n  \"along\",\r\n  \"aloud\",\r\n  \"already\",\r\n  \"also\",\r\n  \"always\",\r\n  \"am\",\r\n  \"america\",\r\n  \"american\",\r\n  \"among\",\r\n  \"amount\",\r\n  \"an\",\r\n  \"and\",\r\n  \"angel\",\r\n  \"anger\",\r\n  \"angry\",\r\n  \"animal\",\r\n  \"another\",\r\n  \"answer\",\r\n  \"ant\",\r\n  \"any\",\r\n  \"anybody\",\r\n  \"anyhow\",\r\n  \"anyone\",\r\n  \"anything\",\r\n  \"anyway\",\r\n  \"anywhere\",\r\n  \"apart\",\r\n  \"apartment\",\r\n  \"ape\",\r\n  \"apiece\",\r\n  \"appear\",\r\n  \"apple\",\r\n  \"april\",\r\n  \"apron\",\r\n  \"are\",\r\n  \"aren't\",\r\n  \"arise\",\r\n  \"arithmetic\",\r\n  \"arm\",\r\n  \"armful\",\r\n  \"army\",\r\n  \"arose\",\r\n  \"around\",\r\n  \"arrange\",\r\n  \"arrive\",\r\n  \"arrived\",\r\n  \"arrow\",\r\n  \"art\",\r\n  \"artist\",\r\n  \"as\",\r\n  \"ash\",\r\n  \"ashes\",\r\n  \"aside\",\r\n  \"ask\",\r\n  \"asleep\",\r\n  \"at\",\r\n  \"ate\",\r\n  \"attack\",\r\n  \"attend\",\r\n  \"attention\",\r\n  \"august\",\r\n  \"aunt\",\r\n  \"author\",\r\n  \"auto\",\r\n  \"automobile\",\r\n  \"autumn\",\r\n  \"avenue\",\r\n  \"awake\",\r\n  \"awaken\",\r\n  \"away\",\r\n  \"awful\",\r\n  \"awfully\",\r\n  \"awhile\",\r\n  \"ax\",\r\n  \"axe\",\r\n  \"baa\",\r\n  \"babe\",\r\n  \"babies\",\r\n  \"back\",\r\n  \"background\",\r\n  \"backward\",\r\n  \"backwards\",\r\n  \"bacon\",\r\n  \"bad\",\r\n  \"badge\",\r\n  \"badly\",\r\n  \"bag\",\r\n  \"bake\",\r\n  \"baker\",\r\n  \"bakery\",\r\n  \"baking\",\r\n  \"ball\",\r\n  \"balloon\",\r\n  \"banana\",\r\n  \"band\",\r\n  \"bandage\",\r\n  \"bang\",\r\n  \"banjo\",\r\n  \"bank\",\r\n  \"banker\",\r\n  \"bar\",\r\n  \"barber\",\r\n  \"bare\",\r\n  \"barefoot\",\r\n  \"barely\",\r\n  \"bark\",\r\n  \"barn\",\r\n  \"barrel\",\r\n  \"base\",\r\n  \"baseball\",\r\n  \"basement\",\r\n  \"basket\",\r\n  \"bat\",\r\n  \"batch\",\r\n  \"bath\",\r\n  \"bathe\",\r\n  \"bathing\",\r\n  \"bathroom\",\r\n  \"bathtub\",\r\n  \"battle\",\r\n  \"battleship\",\r\n  \"bay\",\r\n  \"be\",\r\n  \"beach\",\r\n  \"bead\",\r\n  \"beam\",\r\n  \"bean\",\r\n  \"bear\",\r\n  \"beard\",\r\n  \"beast\",\r\n  \"beat\",\r\n  \"beating\",\r\n  \"beautiful\",\r\n  \"beautify\",\r\n  \"beauty\",\r\n  \"became\",\r\n  \"because\",\r\n  \"become\",\r\n  \"becoming\",\r\n  \"bed\",\r\n  \"bedbug\",\r\n  \"bedroom\",\r\n  \"bedspread\",\r\n  \"bedtime\",\r\n  \"bee\",\r\n  \"beech\",\r\n  \"beef\",\r\n  \"beefsteak\",\r\n  \"beehive\",\r\n  \"been\",\r\n  \"beer\",\r\n  \"beet\",\r\n  \"before\",\r\n  \"beg\",\r\n  \"began\",\r\n  \"beggar\",\r\n  \"begged\",\r\n  \"begin\",\r\n  \"beginning\",\r\n  \"begun\",\r\n  \"behave\",\r\n  \"behind\",\r\n  \"being\",\r\n  \"believe\",\r\n  \"bell\",\r\n  \"belong\",\r\n  \"below\",\r\n  \"belt\",\r\n  \"bench\",\r\n  \"bend\",\r\n  \"beneath\",\r\n  \"bent\",\r\n  \"berries\",\r\n  \"berry\",\r\n  \"beside\",\r\n  \"besides\",\r\n  \"best\",\r\n  \"bet\",\r\n  \"better\",\r\n  \"between\",\r\n  \"bib\",\r\n  \"bible\",\r\n  \"bicycle\",\r\n  \"bid\",\r\n  \"big\",\r\n  \"bigger\",\r\n  \"bill\",\r\n  \"billboard\",\r\n  \"bin\",\r\n  \"bind\",\r\n  \"bird\",\r\n  \"birth\",\r\n  \"birthday\",\r\n  \"biscuit\",\r\n  \"bit\",\r\n  \"bite\",\r\n  \"biting\",\r\n  \"bitter\",\r\n  \"black\",\r\n  \"blackberry\",\r\n  \"blackbird\",\r\n  \"blackboard\",\r\n  \"blackness\",\r\n  \"blacksmith\",\r\n  \"blame\",\r\n  \"blank\",\r\n  \"blanket\",\r\n  \"blast\",\r\n  \"blaze\",\r\n  \"bleed\",\r\n  \"bless\",\r\n  \"blessing\",\r\n  \"blew\",\r\n  \"blind\",\r\n  \"blindfold\",\r\n  \"blinds\",\r\n  \"block\",\r\n  \"blood\",\r\n  \"bloom\",\r\n  \"blossom\",\r\n  \"blot\",\r\n  \"blow\",\r\n  \"blue\",\r\n  \"blueberry\",\r\n  \"bluebird\",\r\n  \"blush\",\r\n  \"board\",\r\n  \"boast\",\r\n  \"boat\",\r\n  \"bob\",\r\n  \"bobwhite\",\r\n  \"bodies\",\r\n  \"body\",\r\n  \"boil\",\r\n  \"boiler\",\r\n  \"bold\",\r\n  \"bone\",\r\n  \"bonnet\",\r\n  \"boo\",\r\n  \"book\",\r\n  \"bookcase\",\r\n  \"bookkeeper\",\r\n  \"boom\",\r\n  \"boot\",\r\n  \"born\",\r\n  \"borrow\",\r\n  \"boss\",\r\n  \"both\",\r\n  \"bother\",\r\n  \"bottle\",\r\n  \"bottom\",\r\n  \"bought\",\r\n  \"bounce\",\r\n  \"bow\",\r\n  \"bowl\",\r\n  \"bow-wow\",\r\n  \"box\",\r\n  \"boxcar\",\r\n  \"boxer\",\r\n  \"boxes\",\r\n  \"boy\",\r\n  \"boyhood\",\r\n  \"bracelet\",\r\n  \"brain\",\r\n  \"brake\",\r\n  \"bran\",\r\n  \"branch\",\r\n  \"brass\",\r\n  \"brave\",\r\n  \"bread\",\r\n  \"break\",\r\n  \"breakfast\",\r\n  \"breast\",\r\n  \"breath\",\r\n  \"breathe\",\r\n  \"breeze\",\r\n  \"brick\",\r\n  \"bride\",\r\n  \"bridge\",\r\n  \"bright\",\r\n  \"brightness\",\r\n  \"bring\",\r\n  \"broad\",\r\n  \"broadcast\",\r\n  \"broke\",\r\n  \"broken\",\r\n  \"brook\",\r\n  \"broom\",\r\n  \"brother\",\r\n  \"brought\",\r\n  \"brown\",\r\n  \"brush\",\r\n  \"bubble\",\r\n  \"bucket\",\r\n  \"buckle\",\r\n  \"bud\",\r\n  \"buffalo\",\r\n  \"bug\",\r\n  \"buggy\",\r\n  \"build\",\r\n  \"building\",\r\n  \"built\",\r\n  \"bulb\",\r\n  \"bull\",\r\n  \"bullet\",\r\n  \"bum\",\r\n  \"bumblebee\",\r\n  \"bump\",\r\n  \"bun\",\r\n  \"bunch\",\r\n  \"bundle\",\r\n  \"bunny\",\r\n  \"burn\",\r\n  \"burst\",\r\n  \"bury\",\r\n  \"bus\",\r\n  \"bush\",\r\n  \"bushel\",\r\n  \"business\",\r\n  \"busy\",\r\n  \"but\",\r\n  \"butcher\",\r\n  \"butt\",\r\n  \"butter\",\r\n  \"buttercup\",\r\n  \"butterfly\",\r\n  \"buttermilk\",\r\n  \"butterscotch\",\r\n  \"button\",\r\n  \"buttonhole\",\r\n  \"buy\",\r\n  \"buzz\",\r\n  \"by\",\r\n  \"bye\",\r\n  \"cab\",\r\n  \"cabbage\",\r\n  \"cabin\",\r\n  \"cabinet\",\r\n  \"cackle\",\r\n  \"cage\",\r\n  \"cake\",\r\n  \"calendar\",\r\n  \"calf\",\r\n  \"call\",\r\n  \"caller\",\r\n  \"calling\",\r\n  \"came\",\r\n  \"camel\",\r\n  \"camp\",\r\n  \"campfire\",\r\n  \"can\",\r\n  \"canal\",\r\n  \"canary\",\r\n  \"candle\",\r\n  \"candlestick\",\r\n  \"candy\",\r\n  \"cane\",\r\n  \"cannon\",\r\n  \"cannot\",\r\n  \"canoe\",\r\n  \"can't\",\r\n  \"canyon\",\r\n  \"cap\",\r\n  \"cape\",\r\n  \"capital\",\r\n  \"captain\",\r\n  \"car\",\r\n  \"card\",\r\n  \"cardboard\",\r\n  \"care\",\r\n  \"careful\",\r\n  \"careless\",\r\n  \"carelessness\",\r\n  \"carload\",\r\n  \"carpenter\",\r\n  \"carpet\",\r\n  \"carriage\",\r\n  \"carrot\",\r\n  \"carry\",\r\n  \"cart\",\r\n  \"carve\",\r\n  \"case\",\r\n  \"cash\",\r\n  \"cashier\",\r\n  \"castle\",\r\n  \"cat\",\r\n  \"catbird\",\r\n  \"catch\",\r\n  \"catcher\",\r\n  \"caterpillar\",\r\n  \"catfish\",\r\n  \"catsup\",\r\n  \"cattle\",\r\n  \"caught\",\r\n  \"cause\",\r\n  \"cave\",\r\n  \"ceiling\",\r\n  \"cell\",\r\n  \"cellar\",\r\n  \"cent\",\r\n  \"center\",\r\n  \"cereal\",\r\n  \"certain\",\r\n  \"certainly\",\r\n  \"chain\",\r\n  \"chair\",\r\n  \"chalk\",\r\n  \"champion\",\r\n  \"chance\",\r\n  \"change\",\r\n  \"chap\",\r\n  \"charge\",\r\n  \"charm\",\r\n  \"chart\",\r\n  \"chase\",\r\n  \"chatter\",\r\n  \"cheap\",\r\n  \"cheat\",\r\n  \"check\",\r\n  \"checkers\",\r\n  \"cheek\",\r\n  \"cheer\",\r\n  \"cheese\",\r\n  \"cherry\",\r\n  \"chest\",\r\n  \"chew\",\r\n  \"chick\",\r\n  \"chicken\",\r\n  \"chief\",\r\n  \"child\",\r\n  \"childhood\",\r\n  \"children\",\r\n  \"chill\",\r\n  \"chilly\",\r\n  \"chimney\",\r\n  \"chin\",\r\n  \"china\",\r\n  \"chip\",\r\n  \"chipmunk\",\r\n  \"chocolate\",\r\n  \"choice\",\r\n  \"choose\",\r\n  \"chop\",\r\n  \"chorus\",\r\n  \"chose\",\r\n  \"chosen\",\r\n  \"christen\",\r\n  \"christmas\",\r\n  \"church\",\r\n  \"churn\",\r\n  \"cigarette\",\r\n  \"circle\",\r\n  \"circus\",\r\n  \"citizen\",\r\n  \"city\",\r\n  \"clang\",\r\n  \"clap\",\r\n  \"class\",\r\n  \"classmate\",\r\n  \"classroom\",\r\n  \"claw\",\r\n  \"clay\",\r\n  \"clean\",\r\n  \"cleaner\",\r\n  \"clear\",\r\n  \"clerk\",\r\n  \"clever\",\r\n  \"click\",\r\n  \"cliff\",\r\n  \"climb\",\r\n  \"clip\",\r\n  \"cloak\",\r\n  \"clock\",\r\n  \"close\",\r\n  \"closet\",\r\n  \"cloth\",\r\n  \"clothes\",\r\n  \"clothing\",\r\n  \"cloud\",\r\n  \"cloudy\",\r\n  \"clover\",\r\n  \"clown\",\r\n  \"club\",\r\n  \"cluck\",\r\n  \"clump\",\r\n  \"coach\",\r\n  \"coal\",\r\n  \"coast\",\r\n  \"coat\",\r\n  \"cob\",\r\n  \"cobbler\",\r\n  \"cocoa\",\r\n  \"coconut\",\r\n  \"cocoon\",\r\n  \"cod\",\r\n  \"codfish\",\r\n  \"coffee\",\r\n  \"coffeepot\",\r\n  \"coin\",\r\n  \"cold\",\r\n  \"collar\",\r\n  \"college\",\r\n  \"color\",\r\n  \"colored\",\r\n  \"colt\",\r\n  \"column\",\r\n  \"comb\",\r\n  \"come\",\r\n  \"comfort\",\r\n  \"comic\",\r\n  \"coming\",\r\n  \"company\",\r\n  \"compare\",\r\n  \"conductor\",\r\n  \"cone\",\r\n  \"connect\",\r\n  \"coo\",\r\n  \"cook\",\r\n  \"cooked\",\r\n  \"cooking\",\r\n  \"cookie\",\r\n  \"cookies\",\r\n  \"cool\",\r\n  \"cooler\",\r\n  \"coop\",\r\n  \"copper\",\r\n  \"copy\",\r\n  \"cord\",\r\n  \"cork\",\r\n  \"corn\",\r\n  \"corner\",\r\n  \"correct\",\r\n  \"cost\",\r\n  \"cot\",\r\n  \"cottage\",\r\n  \"cotton\",\r\n  \"couch\",\r\n  \"cough\",\r\n  \"could\",\r\n  \"couldn't\",\r\n  \"count\",\r\n  \"counter\",\r\n  \"country\",\r\n  \"county\",\r\n  \"course\",\r\n  \"court\",\r\n  \"cousin\",\r\n  \"cover\",\r\n  \"cow\",\r\n  \"coward\",\r\n  \"cowardly\",\r\n  \"cowboy\",\r\n  \"cozy\",\r\n  \"crab\",\r\n  \"crack\",\r\n  \"cracker\",\r\n  \"cradle\",\r\n  \"cramps\",\r\n  \"cranberry\",\r\n  \"crank\",\r\n  \"cranky\",\r\n  \"crash\",\r\n  \"crawl\",\r\n  \"crazy\",\r\n  \"cream\",\r\n  \"creamy\",\r\n  \"creek\",\r\n  \"creep\",\r\n  \"crept\",\r\n  \"cried\",\r\n  \"croak\",\r\n  \"crook\",\r\n  \"crooked\",\r\n  \"crop\",\r\n  \"cross\",\r\n  \"crossing\",\r\n  \"cross-eyed\",\r\n  \"crow\",\r\n  \"crowd\",\r\n  \"crowded\",\r\n  \"crown\",\r\n  \"cruel\",\r\n  \"crumb\",\r\n  \"crumble\",\r\n  \"crush\",\r\n  \"crust\",\r\n  \"cry\",\r\n  \"cries\",\r\n  \"cub\",\r\n  \"cuff\",\r\n  \"cup\",\r\n  \"cuff\",\r\n  \"cup\",\r\n  \"cupboard\",\r\n  \"cupful\",\r\n  \"cure\",\r\n  \"curl\",\r\n  \"curly\",\r\n  \"curtain\",\r\n  \"curve\",\r\n  \"cushion\",\r\n  \"custard\",\r\n  \"customer\",\r\n  \"cut\",\r\n  \"cute\",\r\n  \"cutting\",\r\n  \"dab\",\r\n  \"dad\",\r\n  \"daddy\",\r\n  \"daily\",\r\n  \"dairy\",\r\n  \"daisy\",\r\n  \"dam\",\r\n  \"damage\",\r\n  \"dame\",\r\n  \"damp\",\r\n  \"dance\",\r\n  \"dancer\",\r\n  \"dancing\",\r\n  \"dandy\",\r\n  \"danger\",\r\n  \"dangerous\",\r\n  \"dare\",\r\n  \"dark\",\r\n  \"darkness\",\r\n  \"darling\",\r\n  \"darn\",\r\n  \"dart\",\r\n  \"dash\",\r\n  \"date\",\r\n  \"daughter\",\r\n  \"dawn\",\r\n  \"day\",\r\n  \"daybreak\",\r\n  \"daytime\",\r\n  \"dead\",\r\n  \"deaf\",\r\n  \"deal\",\r\n  \"dear\",\r\n  \"death\",\r\n  \"december\",\r\n  \"decide\",\r\n  \"deck\",\r\n  \"deed\",\r\n  \"deep\",\r\n  \"deer\",\r\n  \"defeat\",\r\n  \"defend\",\r\n  \"defense\",\r\n  \"delight\",\r\n  \"den\",\r\n  \"dentist\",\r\n  \"depend\",\r\n  \"deposit\",\r\n  \"describe\",\r\n  \"desert\",\r\n  \"deserve\",\r\n  \"desire\",\r\n  \"desk\",\r\n  \"destroy\",\r\n  \"devil\",\r\n  \"dew\",\r\n  \"diamond\",\r\n  \"did\",\r\n  \"didn't\",\r\n  \"die\",\r\n  \"died\",\r\n  \"dies\",\r\n  \"difference\",\r\n  \"different\",\r\n  \"dig\",\r\n  \"dim\",\r\n  \"dime\",\r\n  \"dine\",\r\n  \"ding-dong\",\r\n  \"dinner\",\r\n  \"dip\",\r\n  \"direct\",\r\n  \"direction\",\r\n  \"dirt\",\r\n  \"dirty\",\r\n  \"discover\",\r\n  \"dish\",\r\n  \"dislike\",\r\n  \"dismiss\",\r\n  \"ditch\",\r\n  \"dive\",\r\n  \"diver\",\r\n  \"divide\",\r\n  \"do\",\r\n  \"dock\",\r\n  \"doctor\",\r\n  \"does\",\r\n  \"doesn't\",\r\n  \"dog\",\r\n  \"doll\",\r\n  \"dollar\",\r\n  \"dolly\",\r\n  \"done\",\r\n  \"donkey\",\r\n  \"don't\",\r\n  \"door\",\r\n  \"doorbell\",\r\n  \"doorknob\",\r\n  \"doorstep\",\r\n  \"dope\",\r\n  \"dot\",\r\n  \"double\",\r\n  \"dough\",\r\n  \"dove\",\r\n  \"down\",\r\n  \"downstairs\",\r\n  \"downtown\",\r\n  \"dozen\",\r\n  \"drag\",\r\n  \"drain\",\r\n  \"drank\",\r\n  \"draw\",\r\n  \"drawer\",\r\n  \"draw\",\r\n  \"drawing\",\r\n  \"dream\",\r\n  \"dress\",\r\n  \"dresser\",\r\n  \"dressmaker\",\r\n  \"drew\",\r\n  \"dried\",\r\n  \"drift\",\r\n  \"drill\",\r\n  \"drink\",\r\n  \"drip\",\r\n  \"drive\",\r\n  \"driven\",\r\n  \"driver\",\r\n  \"drop\",\r\n  \"drove\",\r\n  \"drown\",\r\n  \"drowsy\",\r\n  \"drub\",\r\n  \"drum\",\r\n  \"drunk\",\r\n  \"dry\",\r\n  \"duck\",\r\n  \"due\",\r\n  \"dug\",\r\n  \"dull\",\r\n  \"dumb\",\r\n  \"dump\",\r\n  \"during\",\r\n  \"dust\",\r\n  \"dusty\",\r\n  \"duty\",\r\n  \"dwarf\",\r\n  \"dwell\",\r\n  \"dwelt\",\r\n  \"dying\",\r\n  \"each\",\r\n  \"eager\",\r\n  \"eagle\",\r\n  \"ear\",\r\n  \"early\",\r\n  \"earn\",\r\n  \"earth\",\r\n  \"east\",\r\n  \"eastern\",\r\n  \"easy\",\r\n  \"eat\",\r\n  \"eaten\",\r\n  \"edge\",\r\n  \"egg\",\r\n  \"eh\",\r\n  \"eight\",\r\n  \"eighteen\",\r\n  \"eighth\",\r\n  \"eighty\",\r\n  \"either\",\r\n  \"elbow\",\r\n  \"elder\",\r\n  \"eldest\",\r\n  \"electric\",\r\n  \"electricity\",\r\n  \"elephant\",\r\n  \"eleven\",\r\n  \"elf\",\r\n  \"elm\",\r\n  \"else\",\r\n  \"elsewhere\",\r\n  \"empty\",\r\n  \"end\",\r\n  \"ending\",\r\n  \"enemy\",\r\n  \"engine\",\r\n  \"engineer\",\r\n  \"english\",\r\n  \"enjoy\",\r\n  \"enough\",\r\n  \"enter\",\r\n  \"envelope\",\r\n  \"equal\",\r\n  \"erase\",\r\n  \"eraser\",\r\n  \"errand\",\r\n  \"escape\",\r\n  \"eve\",\r\n  \"even\",\r\n  \"evening\",\r\n  \"ever\",\r\n  \"every\",\r\n  \"everybody\",\r\n  \"everyday\",\r\n  \"everyone\",\r\n  \"everything\",\r\n  \"everywhere\",\r\n  \"evil\",\r\n  \"exact\",\r\n  \"except\",\r\n  \"exchange\",\r\n  \"excited\",\r\n  \"exciting\",\r\n  \"excuse\",\r\n  \"exit\",\r\n  \"expect\",\r\n  \"explain\",\r\n  \"extra\",\r\n  \"eye\",\r\n  \"eyebrow\",\r\n  \"fable\",\r\n  \"face\",\r\n  \"facing\",\r\n  \"fact\",\r\n  \"factory\",\r\n  \"fail\",\r\n  \"faint\",\r\n  \"fair\",\r\n  \"fairy\",\r\n  \"faith\",\r\n  \"fake\",\r\n  \"fall\",\r\n  \"false\",\r\n  \"family\",\r\n  \"fan\",\r\n  \"fancy\",\r\n  \"far\",\r\n  \"faraway\",\r\n  \"fare\",\r\n  \"farmer\",\r\n  \"farm\",\r\n  \"farming\",\r\n  \"far-off\",\r\n  \"farther\",\r\n  \"fashion\",\r\n  \"fast\",\r\n  \"fasten\",\r\n  \"fat\",\r\n  \"father\",\r\n  \"fault\",\r\n  \"favor\",\r\n  \"favorite\",\r\n  \"fear\",\r\n  \"feast\",\r\n  \"feather\",\r\n  \"february\",\r\n  \"fed\",\r\n  \"feed\",\r\n  \"feel\",\r\n  \"feet\",\r\n  \"fell\",\r\n  \"fellow\",\r\n  \"felt\",\r\n  \"fence\",\r\n  \"fever\",\r\n  \"few\",\r\n  \"fib\",\r\n  \"fiddle\",\r\n  \"field\",\r\n  \"fife\",\r\n  \"fifteen\",\r\n  \"fifth\",\r\n  \"fifty\",\r\n  \"fig\",\r\n  \"fight\",\r\n  \"figure\",\r\n  \"file\",\r\n  \"fill\",\r\n  \"film\",\r\n  \"finally\",\r\n  \"find\",\r\n  \"fine\",\r\n  \"finger\",\r\n  \"finish\",\r\n  \"fire\",\r\n  \"firearm\",\r\n  \"firecracker\",\r\n  \"fireplace\",\r\n  \"fireworks\",\r\n  \"firing\",\r\n  \"first\",\r\n  \"fish\",\r\n  \"fisherman\",\r\n  \"fist\",\r\n  \"fit\",\r\n  \"fits\",\r\n  \"five\",\r\n  \"fix\",\r\n  \"flag\",\r\n  \"flake\",\r\n  \"flame\",\r\n  \"flap\",\r\n  \"flash\",\r\n  \"flashlight\",\r\n  \"flat\",\r\n  \"flea\",\r\n  \"flesh\",\r\n  \"flew\",\r\n  \"flies\",\r\n  \"flight\",\r\n  \"flip\",\r\n  \"flip-flop\",\r\n  \"float\",\r\n  \"flock\",\r\n  \"flood\",\r\n  \"floor\",\r\n  \"flop\",\r\n  \"flour\",\r\n  \"flow\",\r\n  \"flower\",\r\n  \"flowery\",\r\n  \"flutter\",\r\n  \"fly\",\r\n  \"foam\",\r\n  \"fog\",\r\n  \"foggy\",\r\n  \"fold\",\r\n  \"folks\",\r\n  \"follow\",\r\n  \"following\",\r\n  \"fond\",\r\n  \"food\",\r\n  \"fool\",\r\n  \"foolish\",\r\n  \"foot\",\r\n  \"football\",\r\n  \"footprint\",\r\n  \"for\",\r\n  \"forehead\",\r\n  \"forest\",\r\n  \"forget\",\r\n  \"forgive\",\r\n  \"forgot\",\r\n  \"forgotten\",\r\n  \"fork\",\r\n  \"form\",\r\n  \"fort\",\r\n  \"forth\",\r\n  \"fortune\",\r\n  \"forty\",\r\n  \"forward\",\r\n  \"fought\",\r\n  \"found\",\r\n  \"fountain\",\r\n  \"four\",\r\n  \"fourteen\",\r\n  \"fourth\",\r\n  \"fox\",\r\n  \"frame\",\r\n  \"free\",\r\n  \"freedom\",\r\n  \"freeze\",\r\n  \"freight\",\r\n  \"french\",\r\n  \"fresh\",\r\n  \"fret\",\r\n  \"friday\",\r\n  \"fried\",\r\n  \"friend\",\r\n  \"friendly\",\r\n  \"friendship\",\r\n  \"frighten\",\r\n  \"frog\",\r\n  \"from\",\r\n  \"front\",\r\n  \"frost\",\r\n  \"frown\",\r\n  \"froze\",\r\n  \"fruit\",\r\n  \"fry\",\r\n  \"fudge\",\r\n  \"fuel\",\r\n  \"full\",\r\n  \"fully\",\r\n  \"fun\",\r\n  \"funny\",\r\n  \"fur\",\r\n  \"furniture\",\r\n  \"further\",\r\n  \"fuzzy\",\r\n  \"gain\",\r\n  \"gallon\",\r\n  \"gallop\",\r\n  \"game\",\r\n  \"gang\",\r\n  \"garage\",\r\n  \"garbage\",\r\n  \"garden\",\r\n  \"gas\",\r\n  \"gasoline\",\r\n  \"gate\",\r\n  \"gather\",\r\n  \"gave\",\r\n  \"gay\",\r\n  \"gear\",\r\n  \"geese\",\r\n  \"general\",\r\n  \"gentle\",\r\n  \"gentleman\",\r\n  \"gentlemen\",\r\n  \"geography\",\r\n  \"get\",\r\n  \"getting\",\r\n  \"giant\",\r\n  \"gift\",\r\n  \"gingerbread\",\r\n  \"girl\",\r\n  \"give\",\r\n  \"given\",\r\n  \"giving\",\r\n  \"glad\",\r\n  \"gladly\",\r\n  \"glance\",\r\n  \"glass\",\r\n  \"glasses\",\r\n  \"gleam\",\r\n  \"glide\",\r\n  \"glory\",\r\n  \"glove\",\r\n  \"glow\",\r\n  \"glue\",\r\n  \"go\",\r\n  \"going\",\r\n  \"goes\",\r\n  \"goal\",\r\n  \"goat\",\r\n  \"gobble\",\r\n  \"god\",\r\n  \"god\",\r\n  \"godmother\",\r\n  \"gold\",\r\n  \"golden\",\r\n  \"goldfish\",\r\n  \"golf\",\r\n  \"gone\",\r\n  \"good\",\r\n  \"goods\",\r\n  \"goodbye\",\r\n  \"good-by\",\r\n  \"goodbye\",\r\n  \"good-bye\",\r\n  \"good-looking\",\r\n  \"goodness\",\r\n  \"goody\",\r\n  \"goose\",\r\n  \"gooseberry\",\r\n  \"got\",\r\n  \"govern\",\r\n  \"government\",\r\n  \"gown\",\r\n  \"grab\",\r\n  \"gracious\",\r\n  \"grade\",\r\n  \"grain\",\r\n  \"grand\",\r\n  \"grandchild\",\r\n  \"grandchildren\",\r\n  \"granddaughter\",\r\n  \"grandfather\",\r\n  \"grandma\",\r\n  \"grandmother\",\r\n  \"grandpa\",\r\n  \"grandson\",\r\n  \"grandstand\",\r\n  \"grape\",\r\n  \"grapes\",\r\n  \"grapefruit\",\r\n  \"grass\",\r\n  \"grasshopper\",\r\n  \"grateful\",\r\n  \"grave\",\r\n  \"gravel\",\r\n  \"graveyard\",\r\n  \"gravy\",\r\n  \"gray\",\r\n  \"graze\",\r\n  \"grease\",\r\n  \"great\",\r\n  \"green\",\r\n  \"greet\",\r\n  \"grew\",\r\n  \"grind\",\r\n  \"groan\",\r\n  \"grocery\",\r\n  \"ground\",\r\n  \"group\",\r\n  \"grove\",\r\n  \"grow\",\r\n  \"guard\",\r\n  \"guess\",\r\n  \"guest\",\r\n  \"guide\",\r\n  \"gulf\",\r\n  \"gum\",\r\n  \"gun\",\r\n  \"gunpowder\",\r\n  \"guy\",\r\n  \"ha\",\r\n  \"habit\",\r\n  \"had\",\r\n  \"hadn't\",\r\n  \"hail\",\r\n  \"hair\",\r\n  \"haircut\",\r\n  \"hairpin\",\r\n  \"half\",\r\n  \"hall\",\r\n  \"halt\",\r\n  \"ham\",\r\n  \"hammer\",\r\n  \"hand\",\r\n  \"handful\",\r\n  \"handkerchief\",\r\n  \"handle\",\r\n  \"handwriting\",\r\n  \"hang\",\r\n  \"happen\",\r\n  \"happily\",\r\n  \"happiness\",\r\n  \"happy\",\r\n  \"harbor\",\r\n  \"hard\",\r\n  \"hardly\",\r\n  \"hardship\",\r\n  \"hardware\",\r\n  \"hare\",\r\n  \"hark\",\r\n  \"harm\",\r\n  \"harness\",\r\n  \"harp\",\r\n  \"harvest\",\r\n  \"has\",\r\n  \"hasn't\",\r\n  \"haste\",\r\n  \"hasten\",\r\n  \"hasty\",\r\n  \"hat\",\r\n  \"hatch\",\r\n  \"hatchet\",\r\n  \"hate\",\r\n  \"haul\",\r\n  \"have\",\r\n  \"haven't\",\r\n  \"having\",\r\n  \"hawk\",\r\n  \"hay\",\r\n  \"hayfield\",\r\n  \"haystack\",\r\n  \"he\",\r\n  \"head\",\r\n  \"headache\",\r\n  \"heal\",\r\n  \"health\",\r\n  \"healthy\",\r\n  \"heap\",\r\n  \"hear\",\r\n  \"hearing\",\r\n  \"heard\",\r\n  \"heart\",\r\n  \"heat\",\r\n  \"heater\",\r\n  \"heaven\",\r\n  \"heavy\",\r\n  \"he'd\",\r\n  \"heel\",\r\n  \"height\",\r\n  \"held\",\r\n  \"hell\",\r\n  \"he'll\",\r\n  \"hello\",\r\n  \"helmet\",\r\n  \"help\",\r\n  \"helper\",\r\n  \"helpful\",\r\n  \"hem\",\r\n  \"hen\",\r\n  \"henhouse\",\r\n  \"her\",\r\n  \"hers\",\r\n  \"herd\",\r\n  \"here\",\r\n  \"here's\",\r\n  \"hero\",\r\n  \"herself\",\r\n  \"he's\",\r\n  \"hey\",\r\n  \"hickory\",\r\n  \"hid\",\r\n  \"hidden\",\r\n  \"hide\",\r\n  \"high\",\r\n  \"highway\",\r\n  \"hill\",\r\n  \"hillside\",\r\n  \"hilltop\",\r\n  \"hilly\",\r\n  \"him\",\r\n  \"himself\",\r\n  \"hind\",\r\n  \"hint\",\r\n  \"hip\",\r\n  \"hire\",\r\n  \"his\",\r\n  \"hiss\",\r\n  \"history\",\r\n  \"hit\",\r\n  \"hitch\",\r\n  \"hive\",\r\n  \"ho\",\r\n  \"hoe\",\r\n  \"hog\",\r\n  \"hold\",\r\n  \"holder\",\r\n  \"hole\",\r\n  \"holiday\",\r\n  \"hollow\",\r\n  \"holy\",\r\n  \"home\",\r\n  \"homely\",\r\n  \"homesick\",\r\n  \"honest\",\r\n  \"honey\",\r\n  \"honeybee\",\r\n  \"honeymoon\",\r\n  \"honk\",\r\n  \"honor\",\r\n  \"hood\",\r\n  \"hoof\",\r\n  \"hook\",\r\n  \"hoop\",\r\n  \"hop\",\r\n  \"hope\",\r\n  \"hopeful\",\r\n  \"hopeless\",\r\n  \"horn\",\r\n  \"horse\",\r\n  \"horseback\",\r\n  \"horseshoe\",\r\n  \"hose\",\r\n  \"hospital\",\r\n  \"host\",\r\n  \"hot\",\r\n  \"hotel\",\r\n  \"hound\",\r\n  \"hour\",\r\n  \"house\",\r\n  \"housetop\",\r\n  \"housewife\",\r\n  \"housework\",\r\n  \"how\",\r\n  \"however\",\r\n  \"howl\",\r\n  \"hug\",\r\n  \"huge\",\r\n  \"hum\",\r\n  \"humble\",\r\n  \"hump\",\r\n  \"hundred\",\r\n  \"hung\",\r\n  \"hunger\",\r\n  \"hungry\",\r\n  \"hunk\",\r\n  \"hunt\",\r\n  \"hunter\",\r\n  \"hurrah\",\r\n  \"hurried\",\r\n  \"hurry\",\r\n  \"hurt\",\r\n  \"husband\",\r\n  \"hush\",\r\n  \"hut\",\r\n  \"hymn\",\r\n  \"i\",\r\n  \"ice\",\r\n  \"icy\",\r\n  \"i'd\",\r\n  \"idea\",\r\n  \"ideal\",\r\n  \"if\",\r\n  \"ill\",\r\n  \"i'll\",\r\n  \"i'm\",\r\n  \"important\",\r\n  \"impossible\",\r\n  \"improve\",\r\n  \"in\",\r\n  \"inch\",\r\n  \"inches\",\r\n  \"income\",\r\n  \"indeed\",\r\n  \"indian\",\r\n  \"indoors\",\r\n  \"ink\",\r\n  \"inn\",\r\n  \"insect\",\r\n  \"inside\",\r\n  \"instant\",\r\n  \"instead\",\r\n  \"insult\",\r\n  \"intend\",\r\n  \"interested\",\r\n  \"interesting\",\r\n  \"into\",\r\n  \"invite\",\r\n  \"iron\",\r\n  \"is\",\r\n  \"island\",\r\n  \"isn't\",\r\n  \"it\",\r\n  \"its\",\r\n  \"it's\",\r\n  \"itself\",\r\n  \"i've\",\r\n  \"ivory\",\r\n  \"ivy\",\r\n  \"jacket\",\r\n  \"jacks\",\r\n  \"jail\",\r\n  \"jam\",\r\n  \"january\",\r\n  \"jar\",\r\n  \"jaw\",\r\n  \"jay\",\r\n  \"jelly\",\r\n  \"jellyfish\",\r\n  \"jerk\",\r\n  \"jig\",\r\n  \"job\",\r\n  \"jockey\",\r\n  \"join\",\r\n  \"joke\",\r\n  \"joking\",\r\n  \"jolly\",\r\n  \"journey\",\r\n  \"joy\",\r\n  \"joyful\",\r\n  \"joyous\",\r\n  \"judge\",\r\n  \"jug\",\r\n  \"juice\",\r\n  \"juicy\",\r\n  \"july\",\r\n  \"jump\",\r\n  \"june\",\r\n  \"junior\",\r\n  \"junk\",\r\n  \"just\",\r\n  \"keen\",\r\n  \"keep\",\r\n  \"kept\",\r\n  \"kettle\",\r\n  \"key\",\r\n  \"kick\",\r\n  \"kid\",\r\n  \"kill\",\r\n  \"killed\",\r\n  \"kind\",\r\n  \"kindly\",\r\n  \"kindness\",\r\n  \"king\",\r\n  \"kingdom\",\r\n  \"kiss\",\r\n  \"kitchen\",\r\n  \"kite\",\r\n  \"kitten\",\r\n  \"kitty\",\r\n  \"knee\",\r\n  \"kneel\",\r\n  \"knew\",\r\n  \"knife\",\r\n  \"knit\",\r\n  \"knives\",\r\n  \"knob\",\r\n  \"knock\",\r\n  \"knot\",\r\n  \"know\",\r\n  \"known\",\r\n  \"lace\",\r\n  \"lad\",\r\n  \"ladder\",\r\n  \"ladies\",\r\n  \"lady\",\r\n  \"laid\",\r\n  \"lake\",\r\n  \"lamb\",\r\n  \"lame\",\r\n  \"lamp\",\r\n  \"land\",\r\n  \"lane\",\r\n  \"language\",\r\n  \"lantern\",\r\n  \"lap\",\r\n  \"lard\",\r\n  \"large\",\r\n  \"lash\",\r\n  \"lass\",\r\n  \"last\",\r\n  \"late\",\r\n  \"laugh\",\r\n  \"laundry\",\r\n  \"law\",\r\n  \"lawn\",\r\n  \"lawyer\",\r\n  \"lay\",\r\n  \"lazy\",\r\n  \"lead\",\r\n  \"leader\",\r\n  \"leaf\",\r\n  \"leak\",\r\n  \"lean\",\r\n  \"leap\",\r\n  \"learn\",\r\n  \"learned\",\r\n  \"least\",\r\n  \"leather\",\r\n  \"leave\",\r\n  \"leaving\",\r\n  \"led\",\r\n  \"left\",\r\n  \"leg\",\r\n  \"lemon\",\r\n  \"lemonade\",\r\n  \"lend\",\r\n  \"length\",\r\n  \"less\",\r\n  \"lesson\",\r\n  \"let\",\r\n  \"let's\",\r\n  \"letter\",\r\n  \"letting\",\r\n  \"lettuce\",\r\n  \"level\",\r\n  \"liberty\",\r\n  \"library\",\r\n  \"lice\",\r\n  \"lick\",\r\n  \"lid\",\r\n  \"lie\",\r\n  \"life\",\r\n  \"lift\",\r\n  \"light\",\r\n  \"lightness\",\r\n  \"lightning\",\r\n  \"like\",\r\n  \"likely\",\r\n  \"liking\",\r\n  \"lily\",\r\n  \"limb\",\r\n  \"lime\",\r\n  \"limp\",\r\n  \"line\",\r\n  \"linen\",\r\n  \"lion\",\r\n  \"lip\",\r\n  \"list\",\r\n  \"listen\",\r\n  \"lit\",\r\n  \"little\",\r\n  \"live\",\r\n  \"lives\",\r\n  \"lively\",\r\n  \"liver\",\r\n  \"living\",\r\n  \"lizard\",\r\n  \"load\",\r\n  \"loaf\",\r\n  \"loan\",\r\n  \"loaves\",\r\n  \"lock\",\r\n  \"locomotive\",\r\n  \"log\",\r\n  \"lone\",\r\n  \"lonely\",\r\n  \"lonesome\",\r\n  \"long\",\r\n  \"look\",\r\n  \"lookout\",\r\n  \"loop\",\r\n  \"loose\",\r\n  \"lord\",\r\n  \"lose\",\r\n  \"loser\",\r\n  \"loss\",\r\n  \"lost\",\r\n  \"lot\",\r\n  \"loud\",\r\n  \"love\",\r\n  \"lovely\",\r\n  \"lover\",\r\n  \"low\",\r\n  \"luck\",\r\n  \"lucky\",\r\n  \"lumber\",\r\n  \"lump\",\r\n  \"lunch\",\r\n  \"lying\",\r\n  \"machine\",\r\n  \"machinery\",\r\n  \"mad\",\r\n  \"made\",\r\n  \"magazine\",\r\n  \"magic\",\r\n  \"maid\",\r\n  \"mail\",\r\n  \"mailbox\",\r\n  \"mailman\",\r\n  \"major\",\r\n  \"make\",\r\n  \"making\",\r\n  \"male\",\r\n  \"mama\",\r\n  \"mamma\",\r\n  \"man\",\r\n  \"manager\",\r\n  \"mane\",\r\n  \"manger\",\r\n  \"many\",\r\n  \"map\",\r\n  \"maple\",\r\n  \"marble\",\r\n  \"march\",\r\n  \"march\",\r\n  \"mare\",\r\n  \"mark\",\r\n  \"market\",\r\n  \"marriage\",\r\n  \"married\",\r\n  \"marry\",\r\n  \"mask\",\r\n  \"mast\",\r\n  \"master\",\r\n  \"mat\",\r\n  \"match\",\r\n  \"matter\",\r\n  \"mattress\",\r\n  \"may\",\r\n  \"may\",\r\n  \"maybe\",\r\n  \"mayor\",\r\n  \"maypole\",\r\n  \"me\",\r\n  \"meadow\",\r\n  \"meal\",\r\n  \"mean\",\r\n  \"means\",\r\n  \"meant\",\r\n  \"measure\",\r\n  \"meat\",\r\n  \"medicine\",\r\n  \"meet\",\r\n  \"meeting\",\r\n  \"melt\",\r\n  \"member\",\r\n  \"men\",\r\n  \"mend\",\r\n  \"meow\",\r\n  \"merry\",\r\n  \"mess\",\r\n  \"message\",\r\n  \"met\",\r\n  \"metal\",\r\n  \"mew\",\r\n  \"mice\",\r\n  \"middle\",\r\n  \"midnight\",\r\n  \"might\",\r\n  \"mighty\",\r\n  \"mile\",\r\n  \"milk\",\r\n  \"milkman\",\r\n  \"mill\",\r\n  \"miler\",\r\n  \"million\",\r\n  \"mind\",\r\n  \"mine\",\r\n  \"miner\",\r\n  \"mint\",\r\n  \"minute\",\r\n  \"mirror\",\r\n  \"mischief\",\r\n  \"miss\",\r\n  \"miss\",\r\n  \"misspell\",\r\n  \"mistake\",\r\n  \"misty\",\r\n  \"mitt\",\r\n  \"mitten\",\r\n  \"mix\",\r\n  \"moment\",\r\n  \"monday\",\r\n  \"money\",\r\n  \"monkey\",\r\n  \"month\",\r\n  \"moo\",\r\n  \"moon\",\r\n  \"moonlight\",\r\n  \"moose\",\r\n  \"mop\",\r\n  \"more\",\r\n  \"morning\",\r\n  \"morrow\",\r\n  \"moss\",\r\n  \"most\",\r\n  \"mostly\",\r\n  \"mother\",\r\n  \"motor\",\r\n  \"mount\",\r\n  \"mountain\",\r\n  \"mouse\",\r\n  \"mouth\",\r\n  \"move\",\r\n  \"movie\",\r\n  \"movies\",\r\n  \"moving\",\r\n  \"mow\",\r\n  \"mr.\",\r\n  \"mrs.\",\r\n  \"much\",\r\n  \"mud\",\r\n  \"muddy\",\r\n  \"mug\",\r\n  \"mule\",\r\n  \"multiply\",\r\n  \"murder\",\r\n  \"music\",\r\n  \"must\",\r\n  \"my\",\r\n  \"myself\",\r\n  \"nail\",\r\n  \"name\",\r\n  \"nap\",\r\n  \"napkin\",\r\n  \"narrow\",\r\n  \"nasty\",\r\n  \"naughty\",\r\n  \"navy\",\r\n  \"near\",\r\n  \"nearby\",\r\n  \"nearly\",\r\n  \"neat\",\r\n  \"neck\",\r\n  \"necktie\",\r\n  \"need\",\r\n  \"needle\",\r\n  \"needn't\",\r\n  \"negro\",\r\n  \"neighbor\",\r\n  \"neighborhood\",\r\n  \"neither\",\r\n  \"nerve\",\r\n  \"nest\",\r\n  \"net\",\r\n  \"never\",\r\n  \"nevermore\",\r\n  \"new\",\r\n  \"news\",\r\n  \"newspaper\",\r\n  \"next\",\r\n  \"nibble\",\r\n  \"nice\",\r\n  \"nickel\",\r\n  \"night\",\r\n  \"nightgown\",\r\n  \"nine\",\r\n  \"nineteen\",\r\n  \"ninety\",\r\n  \"no\",\r\n  \"nobody\",\r\n  \"nod\",\r\n  \"noise\",\r\n  \"noisy\",\r\n  \"none\",\r\n  \"noon\",\r\n  \"nor\",\r\n  \"north\",\r\n  \"northern\",\r\n  \"nose\",\r\n  \"not\",\r\n  \"note\",\r\n  \"nothing\",\r\n  \"notice\",\r\n  \"november\",\r\n  \"now\",\r\n  \"nowhere\",\r\n  \"number\",\r\n  \"nurse\",\r\n  \"nut\",\r\n  \"oak\",\r\n  \"oar\",\r\n  \"oatmeal\",\r\n  \"oats\",\r\n  \"obey\",\r\n  \"ocean\",\r\n  \"o'clock\",\r\n  \"october\",\r\n  \"odd\",\r\n  \"of\",\r\n  \"off\",\r\n  \"offer\",\r\n  \"office\",\r\n  \"officer\",\r\n  \"often\",\r\n  \"oh\",\r\n  \"oil\",\r\n  \"old\",\r\n  \"old-fashioned\",\r\n  \"on\",\r\n  \"once\",\r\n  \"one\",\r\n  \"onion\",\r\n  \"only\",\r\n  \"onward\",\r\n  \"open\",\r\n  \"or\",\r\n  \"orange\",\r\n  \"orchard\",\r\n  \"order\",\r\n  \"ore\",\r\n  \"organ\",\r\n  \"other\",\r\n  \"otherwise\",\r\n  \"ouch\",\r\n  \"ought\",\r\n  \"our\",\r\n  \"ours\",\r\n  \"ourselves\",\r\n  \"out\",\r\n  \"outdoors\",\r\n  \"outfit\",\r\n  \"outlaw\",\r\n  \"outline\",\r\n  \"outside\",\r\n  \"outward\",\r\n  \"oven\",\r\n  \"over\",\r\n  \"overalls\",\r\n  \"overcoat\",\r\n  \"overeat\",\r\n  \"overhead\",\r\n  \"overhear\",\r\n  \"overnight\",\r\n  \"overturn\",\r\n  \"owe\",\r\n  \"owing\",\r\n  \"owl\",\r\n  \"own\",\r\n  \"owner\",\r\n  \"ox\",\r\n  \"pa\",\r\n  \"pace\",\r\n  \"pack\",\r\n  \"package\",\r\n  \"pad\",\r\n  \"page\",\r\n  \"paid\",\r\n  \"pail\",\r\n  \"pain\",\r\n  \"painful\",\r\n  \"paint\",\r\n  \"painter\",\r\n  \"painting\",\r\n  \"pair\",\r\n  \"pal\",\r\n  \"palace\",\r\n  \"pale\",\r\n  \"pan\",\r\n  \"pancake\",\r\n  \"pane\",\r\n  \"pansy\",\r\n  \"pants\",\r\n  \"papa\",\r\n  \"paper\",\r\n  \"parade\",\r\n  \"pardon\",\r\n  \"parent\",\r\n  \"park\",\r\n  \"part\",\r\n  \"partly\",\r\n  \"partner\",\r\n  \"party\",\r\n  \"pass\",\r\n  \"passenger\",\r\n  \"past\",\r\n  \"paste\",\r\n  \"pasture\",\r\n  \"pat\",\r\n  \"patch\",\r\n  \"path\",\r\n  \"patter\",\r\n  \"pave\",\r\n  \"pavement\",\r\n  \"paw\",\r\n  \"pay\",\r\n  \"payment\",\r\n  \"pea\",\r\n  \"peas\",\r\n  \"peace\",\r\n  \"peaceful\",\r\n  \"peach\",\r\n  \"peaches\",\r\n  \"peak\",\r\n  \"peanut\",\r\n  \"pear\",\r\n  \"pearl\",\r\n  \"peck\",\r\n  \"peek\",\r\n  \"peel\",\r\n  \"peep\",\r\n  \"peg\",\r\n  \"pen\",\r\n  \"pencil\",\r\n  \"penny\",\r\n  \"people\",\r\n  \"pepper\",\r\n  \"peppermint\",\r\n  \"perfume\",\r\n  \"perhaps\",\r\n  \"person\",\r\n  \"pet\",\r\n  \"phone\",\r\n  \"piano\",\r\n  \"pick\",\r\n  \"pickle\",\r\n  \"picnic\",\r\n  \"picture\",\r\n  \"pie\",\r\n  \"piece\",\r\n  \"pig\",\r\n  \"pigeon\",\r\n  \"piggy\",\r\n  \"pile\",\r\n  \"pill\",\r\n  \"pillow\",\r\n  \"pin\",\r\n  \"pine\",\r\n  \"pineapple\",\r\n  \"pink\",\r\n  \"pint\",\r\n  \"pipe\",\r\n  \"pistol\",\r\n  \"pit\",\r\n  \"pitch\",\r\n  \"pitcher\",\r\n  \"pity\",\r\n  \"place\",\r\n  \"plain\",\r\n  \"plan\",\r\n  \"plane\",\r\n  \"plant\",\r\n  \"plate\",\r\n  \"platform\",\r\n  \"platter\",\r\n  \"play\",\r\n  \"player\",\r\n  \"playground\",\r\n  \"playhouse\",\r\n  \"playmate\",\r\n  \"plaything\",\r\n  \"pleasant\",\r\n  \"please\",\r\n  \"pleasure\",\r\n  \"plenty\",\r\n  \"plow\",\r\n  \"plug\",\r\n  \"plum\",\r\n  \"pocket\",\r\n  \"pocketbook\",\r\n  \"poem\",\r\n  \"point\",\r\n  \"poison\",\r\n  \"poke\",\r\n  \"pole\",\r\n  \"police\",\r\n  \"policeman\",\r\n  \"polish\",\r\n  \"polite\",\r\n  \"pond\",\r\n  \"ponies\",\r\n  \"pony\",\r\n  \"pool\",\r\n  \"poor\",\r\n  \"pop\",\r\n  \"popcorn\",\r\n  \"popped\",\r\n  \"porch\",\r\n  \"pork\",\r\n  \"possible\",\r\n  \"post\",\r\n  \"postage\",\r\n  \"postman\",\r\n  \"pot\",\r\n  \"potato\",\r\n  \"potatoes\",\r\n  \"pound\",\r\n  \"pour\",\r\n  \"powder\",\r\n  \"power\",\r\n  \"powerful\",\r\n  \"praise\",\r\n  \"pray\",\r\n  \"prayer\",\r\n  \"prepare\",\r\n  \"present\",\r\n  \"pretty\",\r\n  \"price\",\r\n  \"prick\",\r\n  \"prince\",\r\n  \"princess\",\r\n  \"print\",\r\n  \"prison\",\r\n  \"prize\",\r\n  \"promise\",\r\n  \"proper\",\r\n  \"protect\",\r\n  \"proud\",\r\n  \"prove\",\r\n  \"prune\",\r\n  \"public\",\r\n  \"puddle\",\r\n  \"puff\",\r\n  \"pull\",\r\n  \"pump\",\r\n  \"pumpkin\",\r\n  \"punch\",\r\n  \"punish\",\r\n  \"pup\",\r\n  \"pupil\",\r\n  \"puppy\",\r\n  \"pure\",\r\n  \"purple\",\r\n  \"purse\",\r\n  \"push\",\r\n  \"puss\",\r\n  \"pussy\",\r\n  \"pussycat\",\r\n  \"put\",\r\n  \"putting\",\r\n  \"puzzle\",\r\n  \"quack\",\r\n  \"quart\",\r\n  \"quarter\",\r\n  \"queen\",\r\n  \"queer\",\r\n  \"question\",\r\n  \"quick\",\r\n  \"quickly\",\r\n  \"quiet\",\r\n  \"quilt\",\r\n  \"quit\",\r\n  \"quite\",\r\n  \"rabbit\",\r\n  \"race\",\r\n  \"rack\",\r\n  \"radio\",\r\n  \"radish\",\r\n  \"rag\",\r\n  \"rail\",\r\n  \"railroad\",\r\n  \"railway\",\r\n  \"rain\",\r\n  \"rainy\",\r\n  \"rainbow\",\r\n  \"raise\",\r\n  \"raisin\",\r\n  \"rake\",\r\n  \"ram\",\r\n  \"ran\",\r\n  \"ranch\",\r\n  \"rang\",\r\n  \"rap\",\r\n  \"rapidly\",\r\n  \"rat\",\r\n  \"rate\",\r\n  \"rather\",\r\n  \"rattle\",\r\n  \"raw\",\r\n  \"ray\",\r\n  \"reach\",\r\n  \"read\",\r\n  \"reader\",\r\n  \"reading\",\r\n  \"ready\",\r\n  \"real\",\r\n  \"really\",\r\n  \"reap\",\r\n  \"rear\",\r\n  \"reason\",\r\n  \"rebuild\",\r\n  \"receive\",\r\n  \"recess\",\r\n  \"record\",\r\n  \"red\",\r\n  \"redbird\",\r\n  \"redbreast\",\r\n  \"refuse\",\r\n  \"reindeer\",\r\n  \"rejoice\",\r\n  \"remain\",\r\n  \"remember\",\r\n  \"remind\",\r\n  \"remove\",\r\n  \"rent\",\r\n  \"repair\",\r\n  \"repay\",\r\n  \"repeat\",\r\n  \"report\",\r\n  \"rest\",\r\n  \"return\",\r\n  \"review\",\r\n  \"reward\",\r\n  \"rib\",\r\n  \"ribbon\",\r\n  \"rice\",\r\n  \"rich\",\r\n  \"rid\",\r\n  \"riddle\",\r\n  \"ride\",\r\n  \"rider\",\r\n  \"riding\",\r\n  \"right\",\r\n  \"rim\",\r\n  \"ring\",\r\n  \"rip\",\r\n  \"ripe\",\r\n  \"rise\",\r\n  \"rising\",\r\n  \"river\",\r\n  \"road\",\r\n  \"roadside\",\r\n  \"roar\",\r\n  \"roast\",\r\n  \"rob\",\r\n  \"robber\",\r\n  \"robe\",\r\n  \"robin\",\r\n  \"rock\",\r\n  \"rocky\",\r\n  \"rocket\",\r\n  \"rode\",\r\n  \"roll\",\r\n  \"roller\",\r\n  \"roof\",\r\n  \"room\",\r\n  \"rooster\",\r\n  \"root\",\r\n  \"rope\",\r\n  \"rose\",\r\n  \"rosebud\",\r\n  \"rot\",\r\n  \"rotten\",\r\n  \"rough\",\r\n  \"round\",\r\n  \"route\",\r\n  \"row\",\r\n  \"rowboat\",\r\n  \"royal\",\r\n  \"rub\",\r\n  \"rubbed\",\r\n  \"rubber\",\r\n  \"rubbish\",\r\n  \"rug\",\r\n  \"rule\",\r\n  \"ruler\",\r\n  \"rumble\",\r\n  \"run\",\r\n  \"rung\",\r\n  \"runner\",\r\n  \"running\",\r\n  \"rush\",\r\n  \"rust\",\r\n  \"rusty\",\r\n  \"rye\",\r\n  \"sack\",\r\n  \"sad\",\r\n  \"saddle\",\r\n  \"sadness\",\r\n  \"safe\",\r\n  \"safety\",\r\n  \"said\",\r\n  \"sail\",\r\n  \"sailboat\",\r\n  \"sailor\",\r\n  \"saint\",\r\n  \"salad\",\r\n  \"sale\",\r\n  \"salt\",\r\n  \"same\",\r\n  \"sand\",\r\n  \"sandy\",\r\n  \"sandwich\",\r\n  \"sang\",\r\n  \"sank\",\r\n  \"sap\",\r\n  \"sash\",\r\n  \"sat\",\r\n  \"satin\",\r\n  \"satisfactory\",\r\n  \"saturday\",\r\n  \"sausage\",\r\n  \"savage\",\r\n  \"save\",\r\n  \"savings\",\r\n  \"saw\",\r\n  \"say\",\r\n  \"scab\",\r\n  \"scales\",\r\n  \"scare\",\r\n  \"scarf\",\r\n  \"school\",\r\n  \"schoolboy\",\r\n  \"schoolhouse\",\r\n  \"schoolmaster\",\r\n  \"schoolroom\",\r\n  \"scorch\",\r\n  \"score\",\r\n  \"scrap\",\r\n  \"scrape\",\r\n  \"scratch\",\r\n  \"scream\",\r\n  \"screen\",\r\n  \"screw\",\r\n  \"scrub\",\r\n  \"sea\",\r\n  \"seal\",\r\n  \"seam\",\r\n  \"search\",\r\n  \"season\",\r\n  \"seat\",\r\n  \"second\",\r\n  \"secret\",\r\n  \"see\",\r\n  \"seeing\",\r\n  \"seed\",\r\n  \"seek\",\r\n  \"seem\",\r\n  \"seen\",\r\n  \"seesaw\",\r\n  \"select\",\r\n  \"self\",\r\n  \"selfish\",\r\n  \"sell\",\r\n  \"send\",\r\n  \"sense\",\r\n  \"sent\",\r\n  \"sentence\",\r\n  \"separate\",\r\n  \"september\",\r\n  \"servant\",\r\n  \"serve\",\r\n  \"service\",\r\n  \"set\",\r\n  \"setting\",\r\n  \"settle\",\r\n  \"settlement\",\r\n  \"seven\",\r\n  \"seventeen\",\r\n  \"seventh\",\r\n  \"seventy\",\r\n  \"several\",\r\n  \"sew\",\r\n  \"shade\",\r\n  \"shadow\",\r\n  \"shady\",\r\n  \"shake\",\r\n  \"shaker\",\r\n  \"shaking\",\r\n  \"shall\",\r\n  \"shame\",\r\n  \"shan't\",\r\n  \"shape\",\r\n  \"share\",\r\n  \"sharp\",\r\n  \"shave\",\r\n  \"she\",\r\n  \"she'd\",\r\n  \"she'll\",\r\n  \"she's\",\r\n  \"shear\",\r\n  \"shears\",\r\n  \"shed\",\r\n  \"sheep\",\r\n  \"sheet\",\r\n  \"shelf\",\r\n  \"shell\",\r\n  \"shepherd\",\r\n  \"shine\",\r\n  \"shining\",\r\n  \"shiny\",\r\n  \"ship\",\r\n  \"shirt\",\r\n  \"shock\",\r\n  \"shoe\",\r\n  \"shoemaker\",\r\n  \"shone\",\r\n  \"shook\",\r\n  \"shoot\",\r\n  \"shop\",\r\n  \"shopping\",\r\n  \"shore\",\r\n  \"short\",\r\n  \"shot\",\r\n  \"should\",\r\n  \"shoulder\",\r\n  \"shouldn't\",\r\n  \"shout\",\r\n  \"shovel\",\r\n  \"show\",\r\n  \"shower\",\r\n  \"shut\",\r\n  \"shy\",\r\n  \"sick\",\r\n  \"sickness\",\r\n  \"side\",\r\n  \"sidewalk\",\r\n  \"sideways\",\r\n  \"sigh\",\r\n  \"sight\",\r\n  \"sign\",\r\n  \"silence\",\r\n  \"silent\",\r\n  \"silk\",\r\n  \"sill\",\r\n  \"silly\",\r\n  \"silver\",\r\n  \"simple\",\r\n  \"sin\",\r\n  \"since\",\r\n  \"sing\",\r\n  \"singer\",\r\n  \"single\",\r\n  \"sink\",\r\n  \"sip\",\r\n  \"sir\",\r\n  \"sis\",\r\n  \"sissy\",\r\n  \"sister\",\r\n  \"sit\",\r\n  \"sitting\",\r\n  \"six\",\r\n  \"sixteen\",\r\n  \"sixth\",\r\n  \"sixty\",\r\n  \"size\",\r\n  \"skate\",\r\n  \"skater\",\r\n  \"ski\",\r\n  \"skin\",\r\n  \"skip\",\r\n  \"skirt\",\r\n  \"sky\",\r\n  \"slam\",\r\n  \"slap\",\r\n  \"slate\",\r\n  \"slave\",\r\n  \"sled\",\r\n  \"sleep\",\r\n  \"sleepy\",\r\n  \"sleeve\",\r\n  \"sleigh\",\r\n  \"slept\",\r\n  \"slice\",\r\n  \"slid\",\r\n  \"slide\",\r\n  \"sling\",\r\n  \"slip\",\r\n  \"slipped\",\r\n  \"slipper\",\r\n  \"slippery\",\r\n  \"slit\",\r\n  \"slow\",\r\n  \"slowly\",\r\n  \"sly\",\r\n  \"smack\",\r\n  \"small\",\r\n  \"smart\",\r\n  \"smell\",\r\n  \"smile\",\r\n  \"smoke\",\r\n  \"smooth\",\r\n  \"snail\",\r\n  \"snake\",\r\n  \"snap\",\r\n  \"snapping\",\r\n  \"sneeze\",\r\n  \"snow\",\r\n  \"snowy\",\r\n  \"snowball\",\r\n  \"snowflake\",\r\n  \"snuff\",\r\n  \"snug\",\r\n  \"so\",\r\n  \"soak\",\r\n  \"soap\",\r\n  \"sob\",\r\n  \"socks\",\r\n  \"sod\",\r\n  \"soda\",\r\n  \"sofa\",\r\n  \"soft\",\r\n  \"soil\",\r\n  \"sold\",\r\n  \"soldier\",\r\n  \"sole\",\r\n  \"some\",\r\n  \"somebody\",\r\n  \"somehow\",\r\n  \"someone\",\r\n  \"something\",\r\n  \"sometime\",\r\n  \"sometimes\",\r\n  \"somewhere\",\r\n  \"son\",\r\n  \"song\",\r\n  \"soon\",\r\n  \"sore\",\r\n  \"sorrow\",\r\n  \"sorry\",\r\n  \"sort\",\r\n  \"soul\",\r\n  \"sound\",\r\n  \"soup\",\r\n  \"sour\",\r\n  \"south\",\r\n  \"southern\",\r\n  \"space\",\r\n  \"spade\",\r\n  \"spank\",\r\n  \"sparrow\",\r\n  \"speak\",\r\n  \"speaker\",\r\n  \"spear\",\r\n  \"speech\",\r\n  \"speed\",\r\n  \"spell\",\r\n  \"spelling\",\r\n  \"spend\",\r\n  \"spent\",\r\n  \"spider\",\r\n  \"spike\",\r\n  \"spill\",\r\n  \"spin\",\r\n  \"spinach\",\r\n  \"spirit\",\r\n  \"spit\",\r\n  \"splash\",\r\n  \"spoil\",\r\n  \"spoke\",\r\n  \"spook\",\r\n  \"spoon\",\r\n  \"sport\",\r\n  \"spot\",\r\n  \"spread\",\r\n  \"spring\",\r\n  \"springtime\",\r\n  \"sprinkle\",\r\n  \"square\",\r\n  \"squash\",\r\n  \"squeak\",\r\n  \"squeeze\",\r\n  \"squirrel\",\r\n  \"stable\",\r\n  \"stack\",\r\n  \"stage\",\r\n  \"stair\",\r\n  \"stall\",\r\n  \"stamp\",\r\n  \"stand\",\r\n  \"star\",\r\n  \"stare\",\r\n  \"start\",\r\n  \"starve\",\r\n  \"state\",\r\n  \"station\",\r\n  \"stay\",\r\n  \"steak\",\r\n  \"steal\",\r\n  \"steam\",\r\n  \"steamboat\",\r\n  \"steamer\",\r\n  \"steel\",\r\n  \"steep\",\r\n  \"steeple\",\r\n  \"steer\",\r\n  \"stem\",\r\n  \"step\",\r\n  \"stepping\",\r\n  \"stick\",\r\n  \"sticky\",\r\n  \"stiff\",\r\n  \"still\",\r\n  \"stillness\",\r\n  \"sting\",\r\n  \"stir\",\r\n  \"stitch\",\r\n  \"stock\",\r\n  \"stocking\",\r\n  \"stole\",\r\n  \"stone\",\r\n  \"stood\",\r\n  \"stool\",\r\n  \"stoop\",\r\n  \"stop\",\r\n  \"stopped\",\r\n  \"stopping\",\r\n  \"store\",\r\n  \"stork\",\r\n  \"stories\",\r\n  \"storm\",\r\n  \"stormy\",\r\n  \"story\",\r\n  \"stove\",\r\n  \"straight\",\r\n  \"strange\",\r\n  \"stranger\",\r\n  \"strap\",\r\n  \"straw\",\r\n  \"strawberry\",\r\n  \"stream\",\r\n  \"street\",\r\n  \"stretch\",\r\n  \"string\",\r\n  \"strip\",\r\n  \"stripes\",\r\n  \"strong\",\r\n  \"stuck\",\r\n  \"study\",\r\n  \"stuff\",\r\n  \"stump\",\r\n  \"stung\",\r\n  \"subject\",\r\n  \"such\",\r\n  \"suck\",\r\n  \"sudden\",\r\n  \"suffer\",\r\n  \"sugar\",\r\n  \"suit\",\r\n  \"sum\",\r\n  \"summer\",\r\n  \"sun\",\r\n  \"sunday\",\r\n  \"sunflower\",\r\n  \"sung\",\r\n  \"sunk\",\r\n  \"sunlight\",\r\n  \"sunny\",\r\n  \"sunrise\",\r\n  \"sunset\",\r\n  \"sunshine\",\r\n  \"supper\",\r\n  \"suppose\",\r\n  \"sure\",\r\n  \"surely\",\r\n  \"surface\",\r\n  \"surprise\",\r\n  \"swallow\",\r\n  \"swam\",\r\n  \"swamp\",\r\n  \"swan\",\r\n  \"swat\",\r\n  \"swear\",\r\n  \"sweat\",\r\n  \"sweater\",\r\n  \"sweep\",\r\n  \"sweet\",\r\n  \"sweetness\",\r\n  \"sweetheart\",\r\n  \"swell\",\r\n  \"swept\",\r\n  \"swift\",\r\n  \"swim\",\r\n  \"swimming\",\r\n  \"swing\",\r\n  \"switch\",\r\n  \"sword\",\r\n  \"swore\",\r\n  \"table\",\r\n  \"tablecloth\",\r\n  \"tablespoon\",\r\n  \"tablet\",\r\n  \"tack\",\r\n  \"tag\",\r\n  \"tail\",\r\n  \"tailor\",\r\n  \"take\",\r\n  \"taken\",\r\n  \"taking\",\r\n  \"tale\",\r\n  \"talk\",\r\n  \"talker\",\r\n  \"tall\",\r\n  \"tame\",\r\n  \"tan\",\r\n  \"tank\",\r\n  \"tap\",\r\n  \"tape\",\r\n  \"tar\",\r\n  \"tardy\",\r\n  \"task\",\r\n  \"taste\",\r\n  \"taught\",\r\n  \"tax\",\r\n  \"tea\",\r\n  \"teach\",\r\n  \"teacher\",\r\n  \"team\",\r\n  \"tear\",\r\n  \"tease\",\r\n  \"teaspoon\",\r\n  \"teeth\",\r\n  \"telephone\",\r\n  \"tell\",\r\n  \"temper\",\r\n  \"ten\",\r\n  \"tennis\",\r\n  \"tent\",\r\n  \"term\",\r\n  \"terrible\",\r\n  \"test\",\r\n  \"than\",\r\n  \"thank\",\r\n  \"thanks\",\r\n  \"thankful\",\r\n  \"thanksgiving\",\r\n  \"that\",\r\n  \"that's\",\r\n  \"the\",\r\n  \"theater\",\r\n  \"thee\",\r\n  \"their\",\r\n  \"them\",\r\n  \"then\",\r\n  \"there\",\r\n  \"these\",\r\n  \"they\",\r\n  \"they'd\",\r\n  \"they'll\",\r\n  \"they're\",\r\n  \"they've\",\r\n  \"thick\",\r\n  \"thief\",\r\n  \"thimble\",\r\n  \"thin\",\r\n  \"thing\",\r\n  \"think\",\r\n  \"third\",\r\n  \"thirsty\",\r\n  \"thirteen\",\r\n  \"thirty\",\r\n  \"this\",\r\n  \"thorn\",\r\n  \"those\",\r\n  \"though\",\r\n  \"thought\",\r\n  \"thousand\",\r\n  \"thread\",\r\n  \"three\",\r\n  \"threw\",\r\n  \"throat\",\r\n  \"throne\",\r\n  \"through\",\r\n  \"throw\",\r\n  \"thrown\",\r\n  \"thumb\",\r\n  \"thunder\",\r\n  \"thursday\",\r\n  \"thy\",\r\n  \"tick\",\r\n  \"ticket\",\r\n  \"tickle\",\r\n  \"tie\",\r\n  \"tiger\",\r\n  \"tight\",\r\n  \"till\",\r\n  \"time\",\r\n  \"tin\",\r\n  \"tinkle\",\r\n  \"tiny\",\r\n  \"tip\",\r\n  \"tiptoe\",\r\n  \"tire\",\r\n  \"tired\",\r\n  \"title\",\r\n  \"to\",\r\n  \"toad\",\r\n  \"toadstool\",\r\n  \"toast\",\r\n  \"tobacco\",\r\n  \"today\",\r\n  \"toe\",\r\n  \"together\",\r\n  \"toilet\",\r\n  \"told\",\r\n  \"tomato\",\r\n  \"tomorrow\",\r\n  \"ton\",\r\n  \"tone\",\r\n  \"tongue\",\r\n  \"tonight\",\r\n  \"too\",\r\n  \"took\",\r\n  \"tool\",\r\n  \"toot\",\r\n  \"tooth\",\r\n  \"toothbrush\",\r\n  \"toothpick\",\r\n  \"top\",\r\n  \"tore\",\r\n  \"torn\",\r\n  \"toss\",\r\n  \"touch\",\r\n  \"tow\",\r\n  \"toward\",\r\n  \"towards\",\r\n  \"towel\",\r\n  \"tower\",\r\n  \"town\",\r\n  \"toy\",\r\n  \"trace\",\r\n  \"track\",\r\n  \"trade\",\r\n  \"train\",\r\n  \"tramp\",\r\n  \"trap\",\r\n  \"tray\",\r\n  \"treasure\",\r\n  \"treat\",\r\n  \"tree\",\r\n  \"trick\",\r\n  \"tricycle\",\r\n  \"tried\",\r\n  \"trim\",\r\n  \"trip\",\r\n  \"trolley\",\r\n  \"trouble\",\r\n  \"truck\",\r\n  \"true\",\r\n  \"truly\",\r\n  \"trunk\",\r\n  \"trust\",\r\n  \"truth\",\r\n  \"try\",\r\n  \"tub\",\r\n  \"tuesday\",\r\n  \"tug\",\r\n  \"tulip\",\r\n  \"tumble\",\r\n  \"tune\",\r\n  \"tunnel\",\r\n  \"turkey\",\r\n  \"turn\",\r\n  \"turtle\",\r\n  \"twelve\",\r\n  \"twenty\",\r\n  \"twice\",\r\n  \"twig\",\r\n  \"twin\",\r\n  \"two\",\r\n  \"ugly\",\r\n  \"umbrella\",\r\n  \"uncle\",\r\n  \"under\",\r\n  \"understand\",\r\n  \"underwear\",\r\n  \"undress\",\r\n  \"unfair\",\r\n  \"unfinished\",\r\n  \"unfold\",\r\n  \"unfriendly\",\r\n  \"unhappy\",\r\n  \"unhurt\",\r\n  \"uniform\",\r\n  \"united\",\r\n  \"states\",\r\n  \"unkind\",\r\n  \"unknown\",\r\n  \"unless\",\r\n  \"unpleasant\",\r\n  \"until\",\r\n  \"unwilling\",\r\n  \"up\",\r\n  \"upon\",\r\n  \"upper\",\r\n  \"upset\",\r\n  \"upside\",\r\n  \"upstairs\",\r\n  \"uptown\",\r\n  \"upward\",\r\n  \"us\",\r\n  \"use\",\r\n  \"used\",\r\n  \"useful\",\r\n  \"valentine\",\r\n  \"valley\",\r\n  \"valuable\",\r\n  \"value\",\r\n  \"vase\",\r\n  \"vegetable\",\r\n  \"velvet\",\r\n  \"very\",\r\n  \"vessel\",\r\n  \"victory\",\r\n  \"view\",\r\n  \"village\",\r\n  \"vine\",\r\n  \"violet\",\r\n  \"visit\",\r\n  \"visitor\",\r\n  \"voice\",\r\n  \"vote\",\r\n  \"wag\",\r\n  \"wagon\",\r\n  \"waist\",\r\n  \"wait\",\r\n  \"wake\",\r\n  \"waken\",\r\n  \"walk\",\r\n  \"wall\",\r\n  \"walnut\",\r\n  \"want\",\r\n  \"war\",\r\n  \"warm\",\r\n  \"warn\",\r\n  \"was\",\r\n  \"wash\",\r\n  \"washer\",\r\n  \"washtub\",\r\n  \"wasn't\",\r\n  \"waste\",\r\n  \"watch\",\r\n  \"watchman\",\r\n  \"water\",\r\n  \"watermelon\",\r\n  \"waterproof\",\r\n  \"wave\",\r\n  \"wax\",\r\n  \"way\",\r\n  \"wayside\",\r\n  \"we\",\r\n  \"weak\",\r\n  \"weakness\",\r\n  \"weaken\",\r\n  \"wealth\",\r\n  \"weapon\",\r\n  \"wear\",\r\n  \"weary\",\r\n  \"weather\",\r\n  \"weave\",\r\n  \"web\",\r\n  \"we'd\",\r\n  \"wedding\",\r\n  \"wednesday\",\r\n  \"wee\",\r\n  \"weed\",\r\n  \"week\",\r\n  \"we'll\",\r\n  \"weep\",\r\n  \"weigh\",\r\n  \"welcome\",\r\n  \"well\",\r\n  \"went\",\r\n  \"were\",\r\n  \"we're\",\r\n  \"west\",\r\n  \"western\",\r\n  \"wet\",\r\n  \"we've\",\r\n  \"whale\",\r\n  \"what\",\r\n  \"what's\",\r\n  \"wheat\",\r\n  \"wheel\",\r\n  \"when\",\r\n  \"whenever\",\r\n  \"where\",\r\n  \"which\",\r\n  \"while\",\r\n  \"whip\",\r\n  \"whipped\",\r\n  \"whirl\",\r\n  \"whisky\",\r\n  \"whiskey\",\r\n  \"whisper\",\r\n  \"whistle\",\r\n  \"white\",\r\n  \"who\",\r\n  \"who'd\",\r\n  \"whole\",\r\n  \"who'll\",\r\n  \"whom\",\r\n  \"who's\",\r\n  \"whose\",\r\n  \"why\",\r\n  \"wicked\",\r\n  \"wide\",\r\n  \"wife\",\r\n  \"wiggle\",\r\n  \"wild\",\r\n  \"wildcat\",\r\n  \"will\",\r\n  \"willing\",\r\n  \"willow\",\r\n  \"win\",\r\n  \"wind\",\r\n  \"windy\",\r\n  \"windmill\",\r\n  \"window\",\r\n  \"wine\",\r\n  \"wing\",\r\n  \"wink\",\r\n  \"winner\",\r\n  \"winter\",\r\n  \"wipe\",\r\n  \"wire\",\r\n  \"wise\",\r\n  \"wish\",\r\n  \"wit\",\r\n  \"witch\",\r\n  \"with\",\r\n  \"without\",\r\n  \"woke\",\r\n  \"wolf\",\r\n  \"woman\",\r\n  \"women\",\r\n  \"won\",\r\n  \"wonder\",\r\n  \"wonderful\",\r\n  \"won't\",\r\n  \"wood\",\r\n  \"wooden\",\r\n  \"woodpecker\",\r\n  \"woods\",\r\n  \"wool\",\r\n  \"woolen\",\r\n  \"word\",\r\n  \"wore\",\r\n  \"work\",\r\n  \"worker\",\r\n  \"workman\",\r\n  \"world\",\r\n  \"worm\",\r\n  \"worn\",\r\n  \"worry\",\r\n  \"worse\",\r\n  \"worst\",\r\n  \"worth\",\r\n  \"would\",\r\n  \"wouldn't\",\r\n  \"wound\",\r\n  \"wove\",\r\n  \"wrap\",\r\n  \"wrapped\",\r\n  \"wreck\",\r\n  \"wren\",\r\n  \"wring\",\r\n  \"write\",\r\n  \"writing\",\r\n  \"written\",\r\n  \"wrong\",\r\n  \"wrote\",\r\n  \"wrung\",\r\n  \"yard\",\r\n  \"yarn\",\r\n  \"year\",\r\n  \"yell\",\r\n  \"yellow\",\r\n  \"yes\",\r\n  \"yesterday\",\r\n  \"yet\",\r\n  \"yolk\",\r\n  \"yonder\",\r\n  \"you\",\r\n  \"you'd\",\r\n  \"you'll\",\r\n  \"young\",\r\n  \"youngster\",\r\n  \"your\",\r\n  \"yours\",\r\n  \"you're\",\r\n  \"yourself\",\r\n  \"yourselves\",\r\n  \"youth\",\r\n  \"you've\",\r\n]\r\nmodule.exports = easyWords\r\n","const rs = require('../node_modules/text-readability')\n\nwindow.Textanalysis = function(fctName, text) {\n  var full = isUpper(fctName)\n  switch(fctName.toLowerCase()) {\n    case \"automatedreadabilityindex\":\n    case \"automatedreadability\":\n    case \"automatedindex\":\n    case \"automated\":\n    case \"auto\":{\n      return automatedReadabilityIndex(text, full)\n    }\n\n    case \"colemanliauindex\":\n    case \"colemanliau\" :\n    case \"coleman\":\n    case \"liau\": {\n      return colemanLiauIndex(text, full)\n    }\n\n    case \"dalechallreadabilityscore\":\n    case \"dalechallreadability\":\n    case \"dalechallscore\":\n    case \"dalechall\": {\n      return daleChallReadabilityScore(text, full)\n    }\n\n    case \"fleschkincaidgrade\":\n    case \"fleschkincaid\":\n    case \"fleschgrade\": {\n      return fleschKincaidGrade(text, full)\n    }\n\n    case \"fleschreadingease\":\n    case \"fleschreading\":\n    case \"fleschease\": {\n      return fleschReadingEase(text, full)\n    }\n\n    case \"gunningfog\":\n    case \"gunning\":\n    case \"fog\": {\n      return gunningFog(text, full)\n    }\n\n    case \"linsearwriteformula\":\n    case \"linsearwrite\":\n    case \"linsearformula\":\n    case \"linsear\": {\n      return linsearWriteFormula(text, full)\n    }\n\n    case \"readabilityconsensus\":\n    case \"readability\":\n    case \"consensus\": {\n      return textStandard(text, full)\n    }\n\n    case \"sentences\":\n    case \"sentence\": {\n      return `<b>Sentence Count: ${rs.sentenceCount(text)}</b>`\n    }\n\n    case \"smogindex\":\n    case \"smog\": {\n      return smogIndex(text, full)\n    }\n\n    case \"syllables\":\n    case \"syllable\": {\n      return `<b>Syllable Count: ${rs.syllableCount(text, lang='en-US')}</b>`\n    }\n\n    case \"words\":\n    case \"word\": {\n      return `<b>Word Count: ${rs.lexiconCount(text, removePunctuation=true)}</b>`\n    }\n\n    case \"readingtime\": {\n      return readingtime(text, full)\n    }\n    case \"speakingtime\": {\n      return speakingtime(text, full)\n    }\n  }\n};\n\n\nfunction fleschKincaidGrade(text, full) {\n  var score = rs.fleschKincaidGrade(text)\n\n  var result = `<b>Flesch-Kincaid Grade Level: ${score}</b>`\n\n  if (full) {\n    result += p(`This is a grade formula in that a score of 9.3 means that a ninth grader would be able to read the document.\n<a href=\"https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests#Flesch%E2%80%93Kincaid_grade_level\" rel=\"nofollow\">Wikipedia: Flesch–Kincaid grade level</a>`)\n  }\n\n  return result\n}\n\n\nfunction fleschReadingEase(text, full) {\n  var score = rs.fleschReadingEase(text)\n\n  var result = `<b>Flesch Reading Ease formula: ${score}</b>`\n\n  if (full) {\n    result += p(`While the maximum score is 121.22, there is no limit on how low the score can be. A negative score is valid. <table border=\"2\" style=\"color: lightblue\">\n        <thead>\n          <tr>\n            <th>Score</th>\n            <th>Difficulty</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ${mark(score,90,101)}>\n            <td>90-100</td>\n            <td align=\"center\">Very Easy</td>\n          </tr>\n          <tr ${mark(score,80,90)}>\n            <td>80-89</td>\n            <td align=\"center\">Easy</td>\n          </tr>\n          <tr ${mark(score,70,80)}>\n            <td>70-79</td>\n            <td align=\"center\">Fairly Easy</td>\n          </tr>\n          <tr ${mark(score,60,70)}>\n            <td>60-69</td>\n            <td align=\"center\">Standard</td>\n          </tr>\n          <tr ${mark(score,50,60)}>\n            <td>50-59</td>\n            <td align=\"center\">Fairly Difficult</td>\n          </tr>\n          <tr ${mark(score,30,50)}>\n            <td>30-49</td>\n            <td align=\"center\">Difficult</td>\n          </tr>\n          <tr ${mark(score,0,30)}>\n            <td>0-29</td>\n            <td align=\"center\">Very Confusing</td>\n          </tr>\n        </tbody>\n      </table><a href=\"https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests#Flesch_reading_ease\" rel=\"nofollow\">Wikipedia: Flesch reading ease</a>`)\n  }\n\n  return result\n}\n\nfunction gunningFog(text, full) {\n  var score = rs.gunningFog(text)\n\n  var result = `<b>The Fog Scale: ${score}</b>`\n\n  if (full) {\n    result += p(`This is a grade formula in that a score of 9.3 means that a ninth grader would be able to read the document. <table border=\"2\" style=\"color: lightblue\">\n        <thead>\n          <tr>\n            <th>Fog Index</th>\n            <th>Reading level by grade</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ${mark(score,17,18)}>\n            <td>17</td>\n            <td align=\"center\">College graduate</td>\n          </tr>\n          <tr ${mark(score,16,17)}>\n            <td>16</td>\n            <td align=\"center\">College senior </td>\n          </tr>\n          <tr ${mark(score,15,16)}>\n            <td>15</td>\n            <td align=\"center\">College junior</td>\n          </tr>\n          <tr ${mark(score,14,15)}>\n            <td>14</td>\n            <td align=\"center\">College sophomore</td>\n          </tr>\n          <tr ${mark(score,13,14)}>\n            <td>13</td>\n            <td align=\"center\">College freshman</td>\n          </tr>\n          <tr ${mark(score,12,13)}>\n            <td>12</td>\n            <td align=\"center\">High school senior</td>\n          </tr>\n          <tr ${mark(score,11,12)}>\n            <td>11</td>\n            <td align=\"center\">High school junior</td>\n          </tr>\n          <tr ${mark(score,10,11)}>\n            <td>10</td>\n            <td align=\"center\">High school sophomor</td>\n          </tr>\n          <tr ${mark(score,9,10)}>\n            <td>9</td>\n            <td align=\"center\">High school freshman</td>\n          </tr>\n          <tr ${mark(score,8,9)}>\n            <td>8</td>\n            <td align=\"center\">Eighth grad</td>\n          </tr>\n          <tr ${mark(score,7,8)}>\n            <td>7</td>\n            <td align=\"center\">Seventh grade</td>\n          </tr>\n          <tr ${mark(score,6,7)}>\n            <td>6</td>\n            <td align=\"center\">Sixth grade</td>\n          </tr>\n        </tbody>\n      </table><a href=\"https://en.wikipedia.org/wiki/Gunning_fog_index\" rel=\"nofollow\">Wikipedia: Gunning fog index</a>`)\n  }\n\n  return result\n}\n\n\nfunction smogIndex(text, full) {\n  var score = rs.smogIndex(text)\n\n  var result = `<b>SMOG Index: ${score}</b>`\n\n  if (full) {\n    result += p(`This is a grade formula in that a score of 9.3 means that a ninth grader would be able to read the document.\nTexts of fewer than 30 sentences are statistically invalid, because the SMOG formula was normed on 30-sentence samples. textstat requires atleast 3 sentences for a result.\n<a href=\"https://en.wikipedia.org/wiki/SMOG\" rel=\"nofollow\">Wikipedia: SMOG grade</a>`)\n  }\n\n  return result\n}\n\n\nfunction automatedReadabilityIndex(text, full) {\n  var score = rs.automatedReadabilityIndex(text)\n\n  var result = `<b>Automated Readability Index: ${score}</b>`\n\n  if (full) {\n    result += p(`Returns the ARI (Automated Readability Index) which outputs a number that approximates the grade level needed to comprehend the text.\nFor example if the ARI is 6.5, then the grade level to comprehend the text is 6th to 7th grade. <table border=\"2\" style=\"color: lightblue\">\n        <thead>\n          <tr>\n            <th>Score</th>\n            <th>Age</th>\n            <th>Grade Level</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ${mark(score,14,100)}>\n            <td>14</td>\n            <td>24+</td>\n            <td align=\"center\">Professor</td>\n          </tr>\n          <tr ${mark(score,13,14)}>\n            <td>13</td>\n            <td>18-24</td>\n            <td align=\"center\">College student</td>\n          </tr>\n          <tr ${mark(score,12,13)}>\n            <td>12</td>\n            <td>17-18</td>\n            <td align=\"center\">Twelfth grade</td>\n          </tr>\n          <tr ${mark(score,11,12)}>\n            <td>11</td>\n            <td>16-17</td>\n            <td align=\"center\">Eleventh Grade</td>\n          </tr>\n          <tr ${mark(score,10,11)}>\n            <td>10</td>\n            <td>15-16</td>\n            <td align=\"center\">Tenth Grade</td>\n          </tr>\n          <tr ${mark(score,9,10)}>\n            <td>9</td>\n            <td>14-15</td>\n            <td align=\"center\">Ninth Grade</td>\n          </tr>\n          <tr ${mark(score,8,9)}>\n            <td>8</td>\n            <td>13-14</td>\n            <td align=\"center\">Seventh Grade</td>\n          </tr>\n          <tr ${mark(score,7,8)}>\n            <td>7</td>\n            <td>12-13</td>\n            <td align=\"center\">Seventh Grade</td>\n          </tr>\n          <tr ${mark(score,6,7)}>\n            <td>6</td>\n            <td>11-12</td>\n            <td align=\"center\">Sixth Grade</td>\n          </tr>\n          <tr ${mark(score,5,6)}>\n            <td>5</td>\n            <td>10-11</td>\n            <td align=\"center\">Fifth Grade</td>\n          </tr>\n          <tr ${mark(score,4,5)}>\n            <td>4</td>\n            <td>9-10</td>\n            <td align=\"center\">Fourth Grade</td>\n          </tr>\n          <tr ${mark(score,3,4)}>\n            <td>3</td>\n            <td>7-9</td>\n            <td align=\"center\">Third Grade </td>\n          </tr>\n          <tr ${mark(score,2,3)}>\n            <td>2</td>\n            <td>6-7</td>\n            <td align=\"center\">First/Second Grade</td>\n          </tr>\n          <tr ${mark(score,1,2)}>\n            <td>1</td>\n            <td>5-6</td>\n            <td align=\"center\">Kindergarten</td>\n          </tr>\n        </tbody>\n      </table><a href=\"https://en.wikipedia.org/wiki/Automated_readability_index\" rel=\"nofollow\">Wikipedia: Automated readability index</a>`)\n  }\n\n  return result\n}\n\n\nfunction colemanLiauIndex(text, full) {\n  var score = rs.colemanLiauIndex(text)\n\n  var result = `<b>Coleman-Liau Index: ${score}</b>`\n\n  if (full) {\n    result += p(`This is a grade formula in that a score of 9.3 means that a ninth grader would be able to read the document.\n<a href=\"https://en.wikipedia.org/wiki/Coleman%E2%80%93Liau_index\" rel=\"nofollow\">Wikipedia: Coleman–Liau index</a>`)\n  }\n\n  return result\n}\n\n\nfunction linsearWriteFormula(text, full) {\n  var score = rs.linsearWriteFormula(text)\n\n  var result = `<b>Linsear Write Formula: ${score}</b>`\n\n  if (full) {\n    result += p(`This is a grade formula in that a score of 9.3 means that a ninth grader would be able to read the document.\nIt is a readability metric for English text, purportedly developed for the United States Air Force to help them calculate the readability of their technical manuals. It is specifically designed to calculate the United States grade level of a text sample based on sentence length and the number of words used that have three or more syllables.\n<a href=\"https://en.wikipedia.org/wiki/Linsear_Write\" rel=\"nofollow\">Wikipedia: Linsear Write</a>`)\n  }\n\n  return result\n}\n\n\nfunction daleChallReadabilityScore(text, full) {\n  var score = rs.daleChallReadabilityScore(text)\n\n  var result = `<b>Dale-Chall Readability Score: ${score}</b>`\n\n  if (full) {\n    result += p(`Different from other tests, since it uses a lookup table of the most commonly used 3000 English words. Thus it returns the grade level using the New Dale-Chall Formula. <table border=\"2\" style=\"color: lightblue\">\n        <thead>\n          <tr>\n            <th>Score</th>\n            <th>Understood by</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ${mark(score,9,10)}>\n            <td>9.0–9.9</td>\n            <td align=\"center\">average 13th to 15th-grade (college) student</td>\n          </tr>\n          <tr ${mark(score,8,9)}>\n            <td>8.0–8.9</td>\n            <td align=\"center\">average 11th or 12th-grade student</td>\n          </tr>\n          <tr ${mark(score,7,8)}>\n            <td>7.0–7.9</td>\n            <td align=\"center\">average 9th or 10th-grade student</td>\n          </tr>\n          <tr ${mark(score,6,7)}>\n            <td>6.0–6.9</td>\n            <td align=\"center\">average 7th or 8th-grade student</td>\n          </tr>\n          <tr ${mark(score,5,6)}>\n            <td>5.0–5.9</td>\n            <td align=\"center\">average 5th or 6th-grade student</td>\n          </tr>\n          <tr ${mark(score,0,5)}>\n            <td>4.9 or lower</td>\n            <td align=\"center\">average 4th-grade student or lower</td>\n          </tr>\n        </tbody>\n      </table><a href=\"https://en.wikipedia.org/wiki/Dale%E2%80%93Chall_readability_formula\" rel=\"nofollow\">Wikipedia: Dale–Chall readability formula</a>`)\n  }\n\n  return result\n}\n\nfunction textStandard(text, full) {\n  var score = rs.textStandard(text)\n\n  var result = `<b>Readability Consensus: ${score}</b>`\n\n  if (full) {\n    result += p(`Based upon \"Dale-Chall Readability Score\", \"Linsear Write Formula\", \"Coleman-Liau Index\", \"Automated Readability Index\", \"SMOG Index\", \"Fog Scale\", \" Flesch-Kincaid Grade Level\", \"Flesch Reading Ease formula\", returns the estimated school grade level required to understand the text.`)\n  }\n\n  return result\n}\n\nfunction speakingtime(text, full) {\n  var score = rs.lexiconCount(text, removePunctuation=true)\n\n  var result = `<b>Speaking Time:</b>\n- Presentation: ${minutes(score / 125)} - ${minutes(score / 100)} minutes\n- Audiobook:    ${minutes(score / 160)} - ${minutes(score / 150)} minutes`\n\n  if (full) {\n    result += p(`Audiobooks are recommended to be 150–160 words per minute, which is the range that people comfortably hear and vocalize words. Slide presentations tend to be closer to 100–125 words per minute for a comfortable pace.\n<a href=\"https://en.wikipedia.org/wiki/Words_per_minute#Speech_and_listening\" rel=\"nofollow\">Wikipedia: Speech and listening</a>`)\n  }\n\n  return result\n}\n\n\nfunction readingtime(text, full) {\n  var score = rs.lexiconCount(text, removePunctuation=true)\n\n  var result = `<b>Reading Time:</b>\n- Basic: ${minutes(score / 258)} - ${minutes(score / 198)} minutes\n- Proofreading (paper/monitor): ${minutes(score / 200)} / ${minutes(score / 180)} minutes`\n\n  if (full) {\n    result += p(`The speed at which subjects read a text aloud tend varies between 228±30 words per minute for English. While proofreading materials, people are able to read English at 200 words per minute on paper, and 180 words per on a monitor.\n<a href=\"https://en.wikipedia.org/wiki/Words_per_minute#Reading_and_comprehension\" rel=\"nofollow\">Wikipedia: Reading and comprehension</a>`)\n  }\n\n  return result\n}\n\n\n\nfunction p(text) {\n  return `<p style=\"white-space: break-spaces; color: lightblue; font-style: italic\">${text}</p>`\n}\n\nfunction mark(value, min, max) {\n  if(min <= value && value < max) {\n    return 'style=\"background-color: #146273\"'\n  }\n  return \"\"\n}\n\nfunction isUpper(str) {\n  return str[0].toUpperCase() == str [0]\n}\n\nfunction minutes(minutes) {\n  return new Date(minutes * 60 * 1000).toISOString().substr(14, 5)\n}\n"],"names":["$f13917a90d4db9b497c005419c2c20b9$var$cachedSetTimeout","$f13917a90d4db9b497c005419c2c20b9$var$cachedClearTimeout","$f13917a90d4db9b497c005419c2c20b9$var$process","$f13917a90d4db9b497c005419c2c20b9$var$defaultSetTimout","Error","$f13917a90d4db9b497c005419c2c20b9$var$defaultClearTimeout","$f13917a90d4db9b497c005419c2c20b9$var$runTimeout","fun","setTimeout","e","call","this","clearTimeout","$f13917a90d4db9b497c005419c2c20b9$var$currentQueue","$f13917a90d4db9b497c005419c2c20b9$var$queue","$f13917a90d4db9b497c005419c2c20b9$var$draining","$f13917a90d4db9b497c005419c2c20b9$var$queueIndex","$f13917a90d4db9b497c005419c2c20b9$var$cleanUpNextTick","length","concat","$f13917a90d4db9b497c005419c2c20b9$var$drainQueue","timeout","len","run","marker","$f13917a90d4db9b497c005419c2c20b9$var$runClearTimeout","$f13917a90d4db9b497c005419c2c20b9$var$Item","array","$f13917a90d4db9b497c005419c2c20b9$var$noop","$e39878f5a0922347f4cd81853154618a$var$assertPath","path","TypeError","JSON","stringify","$e39878f5a0922347f4cd81853154618a$var$normalizeStringPosix","allowAboveRoot","code","res","lastSegmentLength","lastSlash","dots","i","charCodeAt","lastSlashIndex","lastIndexOf","slice","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$e39878f5a0922347f4cd81853154618a$var$posix","resolve","resolvedPath","resolvedAbsolute","undefined","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","root","base","$e39878f5a0922347f4cd81853154618a$var$_format","parse","ret","delimiter","win32","posix","pluralize","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","sanitizeRule","rule","RegExp","restoreCase","word","token","toUpperCase","charAt","substr","toLowerCase","interpolate","str","replace","match","index","result","sanitizeWord","rules","hasOwnProperty","test","replaceWord","replaceMap","keepMap","checkWord","bool","count","inclusive","singular","plural","isPlural","isSingular","addPluralRule","replacement","addSingularRule","addUncountableRule","addIrregularRule","single","forEach","$29c10c07dd49d5840f4323318a28eefe$exports","global","factory","$dec8c904121b136d59af0bcf9198d38b$var$pluralize","window","document","current_charmap","old_charmap","charmap","regex","custom_charmap","Object","keys","map","String","fromCharCode","buildRegExp","charToReplace","$de6bea5e5ad18f5a922fbfea14d561eb$exports","$dec8c904121b136d59af0bcf9198d38b$var$normalize","$dec8c904121b136d59af0bcf9198d38b$var$problematic","value","values","$dec8c904121b136d59af0bcf9198d38b$var$APOSTROPHE","split","$dec8c904121b136d59af0bcf9198d38b$var$SPLIT","total","$dec8c904121b136d59af0bcf9198d38b$var$syllable","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_NONALPHABETIC","$dec8c904121b136d59af0bcf9198d38b$var$own","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_MONOSYLLABIC_ONE","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_MONOSYLLABIC_TWO","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_DOUBLE_SYLLABIC_ONE","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_DOUBLE_SYLLABIC_TWO","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_DOUBLE_SYLLABIC_THREE","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_DOUBLE_SYLLABIC_FOUR","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_SINGLE","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_DOUBLE","$dec8c904121b136d59af0bcf9198d38b$var$EXPRESSION_TRIPLE","parts","addOne","subtractOne","returnFactory","countFactory","addition","$0","$9700ebb77d1ed8379f1b406cb5a157aa$var$syllable","$508e7ee297196e8f0f99913e20c4aff7$exports","$9700ebb77d1ed8379f1b406cb5a157aa$var$pluralize","$9700ebb77d1ed8379f1b406cb5a157aa$var$punctuationRE","$9700ebb77d1ed8379f1b406cb5a157aa$var$easyWordSet","Set","$976903d8d762555094333ccd72c98ea7$var$easyWords","Math","copySign","x","y","abs","legacyRound","number","points","p","floor","$9700ebb77d1ed8379f1b406cb5a157aa$var$Readability","grade","gradeMap","1","2","3","charCount","text","ignoreSpaces","letterCount","removePunctuation","filter","n","lexiconCount","syllableCount","lang","toLocaleLowerCase","sentenceCount","ignoreCount","sentences","sentence","validSentences","averageSentenceLength","asl","returnVal","isNaN","averageSyllablePerWord","syllablePerWord","averageCharacterPerWord","charactersPerWord","averageLetterPerWord","lettersPerWord","averageSentencePerWord","sentencesPerWord","fleschReadingEase","flesch","fleschReadingEaseToGrade","score","fleschKincaidGrade","polySyllableCount","wrds","smogIndex","smog","colemanLiauIndex","coleman","automatedReadabilityIndex","characters","words","averageWordPerSentence","readability","linsearWriteFormula","easyWord","difficultWord","textList","presentTense","endsWith","has","suffixIngToE","difficultWords","syllableThreshold","diffWordsSet","normalized","add","daleChallReadabilityScore","wordCount","per","daleChallToGrade","gunningFog","perDiffWords","lix","wordsLen","perLongWords","wrd","rix","textStandard","floatOutput","lower","upper","ceil","freGrade","counterMap","reduce","lowerScore","upperScore","getGradeSuffix","textMedian","sort","a","b","half","$9700ebb77d1ed8379f1b406cb5a157aa$var$readability","$d3dfc027196df876626c47bef188877c$var$p","$d3dfc027196df876626c47bef188877c$var$mark","min","max","$d3dfc027196df876626c47bef188877c$var$minutes","minutes","Date","toISOString","Textanalysis","fctName","full","$d3dfc027196df876626c47bef188877c$var$automatedReadabilityIndex","$d3dfc027196df876626c47bef188877c$var$colemanLiauIndex","$d3dfc027196df876626c47bef188877c$var$daleChallReadabilityScore","$d3dfc027196df876626c47bef188877c$var$fleschKincaidGrade","$d3dfc027196df876626c47bef188877c$var$fleschReadingEase","$d3dfc027196df876626c47bef188877c$var$gunningFog","$d3dfc027196df876626c47bef188877c$var$linsearWriteFormula","$d3dfc027196df876626c47bef188877c$var$textStandard","$9700ebb77d1ed8379f1b406cb5a157aa$exports","$d3dfc027196df876626c47bef188877c$var$smogIndex","$d3dfc027196df876626c47bef188877c$var$readingtime","$d3dfc027196df876626c47bef188877c$var$speakingtime"],"version":3,"file":"index.js.map"}